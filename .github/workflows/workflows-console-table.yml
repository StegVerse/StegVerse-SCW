name: Workflows Console Table

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/**"
      - "README.md"
      - ".github/docs/**"
      - "web/**"

# NOTE: 'workflows:' is NOT a valid permission key in GitHub Actions.
permissions:
  contents: write
  actions: write

jobs:
  build-table:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (PyYAML)
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Build tables & update README
        id: render
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import pathlib, yaml, datetime, re

          ROOT   = pathlib.Path(".")
          WF_DIR = ROOT / ".github" / "workflows"
          DOC    = ROOT / ".github" / "docs" / "WORKFLOWS_CONSOLE.md"
          README = ROOT / "README.md"

          DOC.parent.mkdir(parents=True, exist_ok=True)

          def load_yaml(p):
            try:
              return yaml.safe_load(p.read_text(encoding="utf-8"))
            except Exception as e:
              return e

          def has_dispatch(d):
            if not isinstance(d, dict): return False
            on = d.get("on")
            if on is None: return False
            if isinstance(on, str): return on == "workflow_dispatch"
            if isinstance(on, list): return "workflow_dispatch" in on
            if isinstance(on, dict):
              # treat pure reusable workflows as "no dispatch" (not runnable from UI)
              if set(on.keys()) == {"workflow_call"}:
                return False
              return "workflow_dispatch" in on
            return False

          rows = []
          ok = nodisp = broken = 0
          for p in sorted(WF_DIR.glob("*.y*ml")):
            data = load_yaml(p)
            if isinstance(data, Exception):
              state = "❌ broken"
              note  = type(data).__name__
              broken += 1
            else:
              if has_dispatch(data):
                state = "✅ ok"
                note  = ""
                ok += 1
              else:
                state = "➖ no-dispatch"
                note  = ""
                nodisp += 1

            wf_name = p.name
            # Links
            view = f"./actions/workflows/{wf_name}"
            file = f".github/workflows/{wf_name}"
            # 'Run' links to the workflow page so the Run button is one tap away
            run  = f"./actions/workflows/{wf_name}"
            rows.append((wf_name, state, note, view, file, run))

          total = ok + nodisp + broken
          now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")

          # ---- Write console doc
          lines = []
          lines += ["# Ops Console", ""]
          lines += [f"_Last updated: **{now}**_", ""]
          lines += [f"- ✅ OK: **{ok}**",
                    f"- ➖ No dispatch: **{nodisp}**",
                    f"- ❌ Broken: **{broken}**",
                    f"- Total: **{total}**",
                    ""]
          lines += ["| Workflow | State | Actions |",
                    "|---|---|---|"]
          for wf_name, state, note, view, file, run in rows:
            state_with_note = state + (f" · `{note}`" if note else "")
            actions = f"[View]({view}) · [File]({file}) · [▶ Run]({run})"
            lines.append(f"| `{wf_name}` | {state_with_note} | {actions} |")
          DOC.write_text("\n".join(lines) + "\n", encoding="utf-8")

          # ---- Update README block just under the badge section
          block_start = "<!-- ops-console:table -->"
          block_end   = "<!-- /ops-console:table -->"
          table_block = (
            f"{block_start}\n"
            f"See the full table in [.github/docs/WORKFLOWS_CONSOLE.md](.github/docs/WORKFLOWS_CONSOLE.md).\n\n"
            f"| Workflow | State | Actions |\n"
            f"|---|---|---|\n" +
            "\n".join([
              f"| `{wf}` | {st + (f' · `{nt}`' if nt else '')} | "
              f"[View](./actions/workflows/{wf}) · "
              f"[File](.github/workflows/{wf}) · "
              f"[▶ Run](./actions/workflows/{wf}) |"
              for wf, st, nt, *_ in rows[:30]  # show first 30 for readability
            ]) +
            ("\n\n_(Table truncated; see full console for all workflows.)_\n" if len(rows) > 30 else "\n") +
            f"{block_end}"
          )

          if README.exists():
            txt = README.read_text(encoding="utf-8")
          else:
            txt = "# Repository\n\n"

          if block_start in txt and block_end in txt:
            new = re.sub(
              rf"{re.escape(block_start)}.*?{re.escape(block_end)}",
              table_block, txt, flags=re.S
            )
          else:
            # insert after the workflows status block if present, else append near top
            insert_after = "<!-- /workflows:status -->"
            if insert_after in txt:
              new = txt.replace(insert_after, insert_after + "\n\n## Ops Console\n\n" + table_block)
            else:
              new = txt.rstrip() + "\n\n## Ops Console\n\n" + table_block + "\n"

          if new != txt:
            README.write_text(new, encoding="utf-8")

          # Print summary for the job log
          print(f"OK={ok} NODISPATCH={nodisp} BROKEN={broken} TOTAL={total}")
          PY

      - name: Commit (if changed)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "StegVerse Bot"
          git config user.email "bot@stegverse.org"
          git add .github/docs/WORKFLOWS_CONSOLE.md README.md || true
          if ! git diff --cached --quiet; then
            git commit -m "docs(ops-console): refresh workflows console table"
            git push origin HEAD:main
          else
            echo "No changes to commit."
          fi
