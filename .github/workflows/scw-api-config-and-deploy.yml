name: SCW API â€¢ Configure & Deploy
on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - '.github/workflows/scw-api-config-and-deploy.yml'
  workflow_dispatch: {}

jobs:
  configure-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python lint & compile
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install ruff
          ruff check api
          python -m py_compile $(git ls_files 'api/**/*.py' || git ls-files 'api/**/*.py')

      - name: Configure Render (build/start + env vars)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          ENV_NAME:       ${{ secrets.ENV_NAME }}
          ALLOW_ORIGINS:  ${{ secrets.ALLOW_ORIGINS }}
          HMAC_SECRET:    ${{ secrets.HMAC_SECRET }}
          REDIS_URL:      ${{ secrets.REDIS_URL }}
          DEPLOY_REPORT_TOKEN: ${{ secrets.DEPLOY_REPORT_TOKEN }}
        run: |
          set -euo pipefail
          auth="Authorization: Bearer ${RENDER_API_KEY}"
          json="Content-Type: application/json"

          curl -sS -X PATCH -H "$auth" -H "$json" \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}" \
            -d @- <<'JSON'
          { "buildCommand":"pip install -r api/requirements.txt",
            "startCommand":"uvicorn app.main:app --app-dir api --host 0.0.0.0 --port $PORT" }
          JSON

          to_pair () { printf '{"key":"%s","value":"%s","type":"plain"}' "$1" "$2"; }
          arr=()
          [ -n "${ENV_NAME:-}" ]            && arr+=("$(to_pair ENV_NAME "$ENV_NAME")")
          [ -n "${ALLOW_ORIGINS:-}" ]       && arr+=("$(to_pair ALLOW_ORIGINS "$ALLOW_ORIGINS")")
          [ -n "${HMAC_SECRET:-}" ]         && arr+=("$(to_pair HMAC_SECRET "$HMAC_SECRET")")
          [ -n "${REDIS_URL:-}" ]           && arr+=("$(to_pair REDIS_URL "$REDIS_URL")")
          [ -n "${DEPLOY_REPORT_TOKEN:-}" ] && arr+=("$(to_pair DEPLOY_REPORT_TOKEN "$DEPLOY_REPORT_TOKEN")")
          payload="{\"envVars\":[`IFS=,; echo "${arr[*]-}"`]}"
          curl -sS -X PUT -H "$auth" -H "$json" \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/env-vars" \
            -d "$payload"

      - name: Try to resume (best-effort)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -sS -X POST -H "Authorization: Bearer ${RENDER_API_KEY}" \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/resume" || true

      - name: Trigger deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -sS -X POST \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -d '{"clearCache": false}'

      - name: Wait for health
        id: health
        env:
          HEALTH_URL: ${{ secrets.HEALTH_URL }}
        run: |
          set -euo pipefail
          for i in {1..40}; do
            sleep 6
            code=$(curl -s -o /tmp/health -w "%{http_code}" "$HEALTH_URL")
            if [ "$code" = "200" ]; then
              echo "health_code=$code" >> $GITHUB_OUTPUT
              echo "health_body=$(tr -d '\n' < /tmp/health | sed 's/"/\\"/g')" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i/40: HTTP $code"
          done
          echo "health_code=${code:-0}" >> $GITHUB_OUTPUT
          echo "health_body=" >> $GITHUB_OUTPUT
          exit 1

      - name: Post deploy summary to SCW
        if: ${{ always() }}
        env:
          DEPLOY_REPORT_URL: ${{ secrets.DEPLOY_REPORT_URL }}
          DEPLOY_REPORT_TOKEN: ${{ secrets.DEPLOY_REPORT_TOKEN }}
          HEALTH_CODE: ${{ steps.health.outputs.health_code || 0 }}
          HEALTH_BODY: ${{ steps.health.outputs.health_body || '' }}
        run: |
          set -euo pipefail
          STATUS="${{ job.status }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          BRANCH="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          BODY=$(cat <<JSON
          {
            "source":"github-actions",
            "workflow":"${{ github.workflow }}",
            "run_id":"${{ github.run_id }}",
            "run_url":"${RUN_URL}",
            "commit_sha":"${SHA}",
            "branch":"${BRANCH}",
            "status":"${STATUS}",
            "health_code": ${HEALTH_CODE:-0},
            "health_body": ${HEALTH_BODY:-{}},
            "ts": $(date +%s)
          }
          JSON
          )
          curl -sS -X POST \
            -H "Authorization: Bearer ${DEPLOY_REPORT_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$DEPLOY_REPORT_URL" || true
