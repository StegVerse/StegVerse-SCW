name: validate-hcb

on:
  workflow_dispatch:
    inputs:
      src_dir:
        description: "Path to HCB tree (default: hybrid-collab-bridge)."
        required: false
        default: "hybrid-collab-bridge"
      require_version_prefix:
        description: "Require VERSION to start with this prefix (e.g., v1.)"
        required: false
        default: ""
  workflow_call:
    inputs:
      src_dir:
        description: "Path to HCB tree to validate (e.g., /tmp/hcb-export)"
        required: false
        type: string
        default: "hybrid-collab-bridge"
      require_version_prefix:
        description: "Require VERSION to start with this prefix (e.g., v1.)"
        required: false
        type: string
        default: ""

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      SRC_DIR: ${{ inputs.src_dir || github.event.inputs.src_dir }}
      REQ_PREFIX: ${{ inputs.require_version_prefix || github.event.inputs.require_version_prefix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Validate Hybrid Collab Bridge structure
        id: validate
        run: |
          set -euo pipefail
          python - << 'PY'
          import os, re, json, sys, pathlib, yaml, textwrap

          src_dir = pathlib.Path(os.environ.get("SRC_DIR") or "hybrid-collab-bridge")
          req_prefix = os.environ.get("REQ_PREFIX","").strip()

          report = {
              "source": str(src_dir),
              "checks": [],
              "errors": [],
              "warnings": [],
              "version": None,
          }

          def ok(msg): report["checks"].append({"status":"OK","msg":msg})
          def warn(msg): report["warnings"].append({"msg":msg})
          def err(msg): report["errors"].append({"msg":msg})

          if not src_dir.exists():
              err(f"Source folder not found: {src_dir}")
              sys.exit(1)
          ok(f"Found source: {src_dir}")

          required = [
              "README-HCB.md",
              "VERSION",
              "api/app/main.py",
              "api/requirements.txt",
              "providers.yaml"
          ]
          for rel in required:
              p = src_dir / rel
              (ok if p.exists() else err)(f"{'Found' if p.exists() else 'Missing'}: {rel}")

          vf = src_dir / "VERSION"
          if vf.exists():
              ver = vf.read_text(encoding="utf-8").strip()
              report["version"] = ver
              if not re.match(r"^v\d+\.\d+(?:\.\d+)?$", ver):
                  err(f"Invalid VERSION format: {ver}")
              elif req_prefix and not ver.startswith(req_prefix):
                  err(f"VERSION '{ver}' does not match prefix {req_prefix}")
              else:
                  ok(f"VERSION validated: {ver}")
          else:
              err("Missing VERSION file")

          readme = src_dir / "README-HCB.md"
          if readme.exists():
              txt = readme.read_text(encoding="utf-8").lower()
              for section in ["migration", "future enhancements"]:
                  if section in txt:
                      ok(f"README contains section: {section}")
                  else:
                      warn(f"README missing section: {section}")
          else:
              err("README-HCB.md missing")

          py = src_dir / "providers.yaml"
          if py.exists():
              try:
                  with open(py, "r") as f: data = yaml.safe_load(f)
                  if isinstance(data, dict):
                      ok("providers.yaml parsed successfully")
                  else:
                      warn("providers.yaml loaded but is not a mapping")
              except Exception as e:
                  err(f"providers.yaml failed to parse: {e}")
          else:
              err("providers.yaml missing")

          summary = f"✅ OK: {len(report['checks'])} | ⚠️ {len(report['warnings'])} | ❌ {len(report['errors'])}"
          report["summary"] = summary

          with open("/tmp/hcb-validate-report.json", "w") as f:
              json.dump(report, f, indent=2)

          md = [f"### HCB Validation Summary", f"- Source: `{src_dir}`", f"- {summary}\n"]
          if report["errors"]:
              md.append("#### ❌ Errors")
              md.extend(f"- {e['msg']}" for e in report["errors"])
          if report["warnings"]:
              md.append("\n#### ⚠️ Warnings")
              md.extend(f"- {w['msg']}" for w in report["warnings"])
          if report["checks"]:
              md.append("\n#### ✅ Checks")
              md.extend(f"- {c['msg']}" for c in report["checks"])
          pathlib.Path(os.environ["GITHUB_STEP_SUMMARY"]).write_text("\n".join(md))

          if report["errors"]:
              print(json.dumps(report, indent=2))
              sys.exit(1)
          PY

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hcb-validate-report-${{ github.run_id }}
          path: /tmp/hcb-validate-report.json
          if-no-files-found: warn
