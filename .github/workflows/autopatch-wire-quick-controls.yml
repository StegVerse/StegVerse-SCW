name: Autopatch: Wire Quick Controls (ops)

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/autopatch-ops.yml"

permissions:
  contents: write

jobs:
  wire_block:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure Quick Controls block is present (add or repair)
        id: patch
        shell: bash
        run: |
          set -euo pipefail
          FILE=".github/workflows/autopatch-ops.yml"
          BEGIN="# >>> quick-controls:summary"
          END="# <<< quick-controls:summary"

          if [ ! -f "$FILE" ]; then
            echo "::error file=$FILE::File not found"
            exit 1
          fi

          # Desired block content (indent matches job 'steps' level)
          read -r -d '' BLOCK <<'YAML'
      # >>> quick-controls:summary
      - name: Add quick buttons (Run / Repair) to summary
        if: always()
        env:
          REPO: ${{ github.repository }}
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<'MD'
### Quick Controls

> Tap a link to open the Action in the mobile UI.  
> **Run** = open the workflow page (press *Run workflow*)  
> **Repair now** = run the fixer that adds `workflow_dispatch` to missing files.

| Action | Link |
|---|---|
| Run: Ops Console Table | [Open](./actions/workflows/workflows-console-table.yml) |
| Repair: Add `workflow_dispatch` | [Open](./actions/workflows/fix-dispatch-triggers.yml) |
| Kick: YAML Bulk Autofix | [Open](./actions/workflows/yaml-bulk-autofix.yml) |
| Kick: Autopatch Apply | [Open](./actions/workflows/kick-autopatch-apply.yml) |
MD
      # <<< quick-controls:summary
YAML

          orig_sha="$(sha256sum "$FILE" | awk '{print $1}')"

          if grep -qF "$BEGIN" "$FILE" && grep -qF "$END" "$FILE"; then
            # Replace existing marked region
            awk -v BEGIN="$BEGIN" -v END="$END" -v repl="$BLOCK" '
              BEGIN { inblk=0 }
              {
                if (index($0, BEGIN)) { print repl; inblk=1; next }
                if (inblk && index($0, END)) { inblk=0; next }
                if (!inblk) print
              }
            ' "$FILE" > "$FILE.new"
            mv "$FILE.new" "$FILE"
          else
            # Insert block before the "Post summary" step, if present; else append
            if grep -nE '^[[:space:]]+- name: Post summary' "$FILE" >/dev/null; then
              line_no="$(grep -nE '^[[:space:]]+- name: Post summary' "$FILE" | head -1 | cut -d: -f1)"
              head -n $((line_no-1)) "$FILE" > "$FILE.new"
              printf "%s\n" "$BLOCK" >> "$FILE.new"
              tail -n +$((line_no)) "$FILE" >> "$FILE.new"
              mv "$FILE.new" "$FILE"
            else
              printf "\n%s\n" "$BLOCK" >> "$FILE"
            fi
          fi

          new_sha="$(sha256sum "$FILE" | awk '{print $1}')"
          if [ "$orig_sha" != "$new_sha" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & push (if changed)
        if: steps.patch.outputs.changed == 'true'
        run: |
          set -euo pipefail
          git config user.name  "StegVerse Bot"
          git config user.email "bot@stegverse.org"
          git add .github/workflows/autopatch-ops.yml
          git commit -m "autopatch(ops): add/repair Quick Controls summary block"
          git push origin HEAD:main

      - name: Summary
        if: always()
        run: |
          echo "## Wire Quick Controls" >> "$GITHUB_STEP_SUMMARY"
          echo "- File: \`.github/workflows/autopatch-ops.yml\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Changed: \`${{ steps.patch.outputs.changed || 'false' }}\`" >> "$GITHUB_STEP_SUMMARY"
