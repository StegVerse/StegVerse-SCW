name: Workflows Console Table (Hybrid Links)

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/**"
      - "README.md"

permissions:
  contents: write

jobs:
  build-table:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: python -m pip install --upgrade pip pyyaml

      - name: Build tables & update README
        env:
          REPO_FULL: ${{ github.repository }}   # owner/repo
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pathlib, urllib.parse, datetime, yaml, re

          ROOT   = pathlib.Path(".")
          WF_DIR = ROOT/".github/workflows"
          DOC    = ROOT/".github/docs/WORKFLOWS_CONSOLE.md"
          README = ROOT/"README.md"

          owner_repo = os.environ["REPO_FULL"]
          abs_base   = f"https://github.com/{owner_repo}"
          runs_base  = f"{abs_base}/actions/workflows"

          def load_yaml(p):
            try:
              return yaml.safe_load(p.read_text(encoding="utf-8"))
            except Exception as e:
              return e

          def has_dispatch(d):
            if not isinstance(d, dict): return False
            on = d.get("on")
            if on is None: return False
            if isinstance(on, str):
              return on == "workflow_dispatch"
            if isinstance(on, list):
              return "workflow_dispatch" in on
            if isinstance(on, dict):
              return "workflow_dispatch" in on
            return False

          rows = []
          ok = nodisp = broken = 0
          for p in sorted(WF_DIR.glob("*.y*ml")):
            data = load_yaml(p)
            state = ""
            note  = ""
            if isinstance(data, Exception):
              broken += 1
              state, note = "❌ broken", type(data).__name__
            else:
              if has_dispatch(data):
                ok += 1
                state = "✅ ok"
              else:
                nodisp += 1
                state = "➖ no-dispatch"

            # links
            fname = p.name
            enc   = urllib.parse.quote(fname)
            run_abs   = f"{runs_base}/{enc}"
            view_abs  = run_abs  # same page; shows runs + “Run workflow” button
            file_rel  = f".github/workflows/{fname}"

            actions_cell = f"[Run]({run_abs}) · [View]({view_abs}) · [File]({file_rel})"
            rows.append((fname, state, note, actions_cell))

          total = ok + nodisp + broken
          now = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")

          # ---- write DOC
          DOC.parent.mkdir(parents=True, exist_ok=True)
          out = []
          out += [f"# Ops Console", "", f"_Last updated: **{now}**_", ""]
          out += [f"- ✅ OK: **{ok}**", f"- ➖ No dispatch: **{nodisp}**", f"- ❌ Broken: **{broken}**", f"- Total: **{total}**", ""]
          out += ["| Workflow | State | Actions |", "|---|---|---|"]
          for n, s, note, a in rows:
            if note:
              s = f"{s} · `{note}`"
            out.append(f"| `{n}` | {s} | {a} |")
          DOC.write_text("\n".join(out) + "\n", encoding="utf-8")

          # ---- inject into README below a stable marker block
          start = "<!-- ops:console -->"
          end   = "<!-- /ops:console -->"
          block = (
            f"{start}\n"
            f"**Ops Console** — quick links (hybrid):\n\n"
            f"[Open full console]({DOC.as_posix()}) · "
            f"[All Actions]({abs_base}/actions)\n\n"
            f"{'| Workflow | State | Actions |'}\n"
            f"{'|---|---|---|'}\n" +
            "\n".join(
              f"| `{n}` | { (s + (f' · `{note}`' if note else '')) } | [Run]({runs_base}/{urllib.parse.quote(n)}) · [File](.github/workflows/{n}) |"
              for (n,s,note,_) in rows[:12]   # small preview (first 12); full table lives in DOC
            )
            + "\n\n"
            f"_See the full table for all workflows → [{DOC.as_posix()}]({DOC.as_posix()})._\n"
            f"{end}"
          )

          if README.exists():
            txt = README.read_text(encoding="utf-8")
          else:
            txt = "# Repository\n\n"

          if start in txt and end in txt:
            new = re.sub(rf"{re.escape(start)}.*?{re.escape(end)}", block, txt, flags=re.S)
          else:
            new = txt.rstrip() + "\n\n## Operations\n\n" + block + "\n"

          if new != txt:
            README.write_text(new, encoding="utf-8")

          print(f"[console] ok={ok} nodisp={nodisp} broken={broken} total={total} at {now}")
          PY

      - name: Commit (if changed)
        run: |
          set -euo pipefail
          git config user.name  "StegVerse Bot"
          git config user.email "bot@stegverse.org"
          git add .github/docs/WORKFLOWS_CONSOLE.md README.md || true
          if ! git diff --cached --quiet; then
            git commit -m "docs(ops-console): hybrid links (absolute run + relative file) + README preview"
            git push origin HEAD:main
          else
            echo "No changes."
          fi
