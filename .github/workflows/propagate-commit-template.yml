name: propagate-commit-template

on:
  workflow_dispatch:
    inputs:
      repos_csv:
        description: Comma-separated list of repos (owner/repo,owner/repo)
        required: true
      pr_branch:
        description: Branch name to push
        required: false
        default: chore/commit-template-propagation

permissions:
  contents: write
  pull-requests: write

jobs:
  propagate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Run propagation script
        env:
          STEGVERSE_BOT_TOKEN: ${{ secrets.STEGVERSE_BOT_TOKEN }}
          REPOS_CSV_INPUT: ${{ inputs.repos_csv }}
          PR_BRANCH: ${{ inputs.pr_branch }}
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, subprocess, pathlib, sys, textwrap, urllib.request, urllib.error, re

          token = os.getenv("STEGVERSE_BOT_TOKEN")
          if not token:
              print("Missing STEGVERSE_BOT_TOKEN", file=sys.stderr); sys.exit(1)

          csv = (os.getenv("REPOS_CSV_INPUT") or "").strip()
          repos = [r.strip() for r in csv.split(",") if r.strip()]
          if not repos:
              print("No repos provided.", file=sys.stderr); sys.exit(1)

          pr_branch = os.getenv("PR_BRANCH") or "chore/commit-template-propagation"

          commit_template = textwrap.dedent(
              "<type>(<scope>): <summary>\n"
              "# feat(api): add provider registry for hybrid bridge\n"
              "\n"
              "# Body (optional): details on what changed and why\n"
              "\n"
              "# Footer (optional): references, automation tags, etc.\n"
              "# Refs: #42\n"
              "# Signed-off-by: Name <email@example.com>\n"
          )

          patch_commit = (
              "version: 1\n"
              "actions:\n"
              "  - write_files:\n"
              "      - path: \"templates/commit_template.txt\"\n"
              "        mode: \"100644\"\n"
              "        contents: |\n"
              + textwrap.indent(commit_template, "          ")
              + "  - commit:\n"
              "      message: \"chore(templates): add universal commit message template (autopatch)\"\n"
          )

          patch_config = (
              "version: 1\n"
              "actions:\n"
              "  - run_shell:\n"
              "      name: Configure Git to use commit template\n"
              "      script: |\n"
              "        set -e\n"
              "        if [ -f templates/commit_template.txt ]; then\n"
              "          git config commit.template templates/commit_template.txt\n"
              "          echo \"[AutoPatch] Commit template configured successfully.\"\n"
              "        else\n"
              "          echo \"[AutoPatch] Warning: commit_template.txt not found â€” skipping.\"\n"
              "        fi\n"
              "  - commit:\n"
              "      message: \"chore(autopatch): auto-configure commit template\"\n"
          )

          def open_pr(repo, branch):
              data = json.dumps({
                  "title": "chore(templates): add universal commit template + autopatch config",
                  "head": branch,
                  "base": "main",
                  "body": "Adds a universal commit template and autopatch config for consistent message conventions."
              }).encode()
              req = urllib.request.Request(f"https://api.github.com/repos/{repo}/pulls", data=data, method="POST")
              req.add_header("Authorization", f"token {token}")
              req.add_header("Accept", "application/vnd.github+json")
              try:
                  with urllib.request.urlopen(req) as resp:
                      j = json.loads(resp.read())
                      print(f"PR opened for {repo}: {j.get('html_url')}")
              except urllib.error.HTTPError as e:
                  print(f"PR failed for {repo}: {e.code} {e.read().decode()}", file=sys.stderr)

          def ensure_patches_yaml_has(entries, patches_file: pathlib.Path):
              # Create/normalize patches.yml and avoid the 'patches: []' anti-pattern.
              if not patches_file.exists():
                  txt = "version: 1\npatches:\n"
              else:
                  txt = patches_file.read_text(encoding="utf-8")
                  if "patches:" not in txt:
                      m = re.search(r"^version:\s*\d+\s*$", txt, re.M)
                      header = (m.group(0) + "\n") if m else "version: 1\n"
                      txt = header + "patches:\n"
                  txt = txt.replace("patches: []", "patches:")
              for _id, _path in entries:
                  if f"path: {_path}" not in txt:
                      if not txt.endswith("\n"): txt += "\n"
                      txt += f"  - id: {_id}\n    path: {_path}\n"
              patches_file.write_text(txt, encoding="utf-8")

          for repo in repos:
              print(f"=== Processing {repo} ===")
              repo_dir = pathlib.Path(repo.replace("/", "__"))
              subprocess.run(["git", "clone", f"https://x-access-token:{token}@github.com/{repo}.git", str(repo_dir)], check=True)
              subprocess.run(["git", "-C", str(repo_dir), "checkout", "-b", pr_branch], check=True)

              ap_dir = repo_dir / ".github" / "autopatch"
              ap_dir.mkdir(parents=True, exist_ok=True)

              (ap_dir / "commit-template.patch.yml").write_text(patch_commit, encoding="utf-8")
              (ap_dir / "commit-template-config.patch.yml").write_text(patch_config, encoding="utf-8")

              patches_file = ap_dir / "patches.yml"
              ensure_patches_yaml_has(
                  [
                      ("commit-template", ".github/autopatch/commit-template.patch.yml"),
                      ("commit-template-config", ".github/autopatch/commit-template-config.patch.yml"),
                  ],
                  patches_file,
              )

              subprocess.run(["git", "-C", str(repo_dir), "add", "-A"], check=True)

# Ensure Git user identity
subprocess.run([
    "git", "-C", str(repo_dir), "config", "user.email", "bot@stegverse.org"
], check=True)
subprocess.run([
    "git", "-C", str(repo_dir), "config", "user.name", "StegVerse Bot"
], check=True)

# Commit and push if changes exist
if subprocess.run(["git", "-C", str(repo_dir), "diff", "--cached", "--quiet"]).returncode != 0:
    subprocess.run([
        "git", "-C", str(repo_dir), "commit", "-m",
        "chore(templates): add universal commit template + autopatch config"
    ], check=True)
    subprocess.run([
        "git", "-C", str(repo_dir), "push", "-u", "origin", pr_branch
    ], check=True)
    open_pr(repo, pr_branch)
else:
    print(f"{repo}: no changes needed.")                  open_pr(repo, pr_branch)
    else:
        print(f"{repo}: no changes needed.")
          PY
