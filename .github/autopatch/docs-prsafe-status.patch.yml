version: 1
actions:
  - write_files:
      - path: "scripts/autodocs_probe_pr_safe.py"
        mode: "100755"
        contents: |
          #!/usr/bin/env python3
          """
          AutoDocs: PR-safe dispatcher coverage probe
          - Scans .github/workflows/*.y*ml for 'uses: ./.github/actions/pr-safe-dispatch'
          - Writes .github/docs/PR_SAFE_STATUS.md
          - Updates README.md between <!-- pr-safe-status:start --> ... <!-- pr-safe-status:end -->
          - Idempotent; only changes files when content differs
          """
          import pathlib, re, sys
          try:
              import yaml
          except Exception:
              print("::error title=Missing PyYAML::Install PyYAML before running this script.")
              sys.exit(1)

          WF_DIR = pathlib.Path(".github/workflows")
          DOCS = pathlib.Path(".github/docs")
          DOCS.mkdir(parents=True, exist_ok=True)
          STATUS_MD = DOCS / "PR_SAFE_STATUS.md"
          README = pathlib.Path("README.md")
          START = "<!-- pr-safe-status:start -->"
          END = "<!-- pr-safe-status:end -->"
          TARGET = "./.github/actions/pr-safe-dispatch"

          def scan():
              rows = []
              if not WF_DIR.exists():
                  return rows
              for wf in sorted(WF_DIR.glob("*.y*ml")):
                  try:
                      data = yaml.safe_load(wf.read_text(encoding="utf-8"))
                  except Exception as e:
                      rows.append((wf.name, "❓ parse-failed"))
                      continue
                  found_any = False
                  jobs = (data or {}).get("jobs") or {}
                  for jname, job in jobs.items():
                      steps = (job or {}).get("steps") or []
                      present = any(
                          isinstance(s, dict) and str(s.get("uses","")).strip() == TARGET
                          for s in steps
                      )
                      if present:
                          found_any = True
                          rows.append((f"{wf.name} » {jname}", "✅ present"))
                  if not found_any:
                      rows.append((wf.name, "⏭ not-inserted"))
              return rows

          def render_table(rows):
              if not rows:
                  return "_No workflows found._"
              hdr = "| Workflow / Job | PR-safe dispatcher |\n|---|---|\n"
              lines = [hdr]
              for name, state in rows:
                  lines.append(f"| `{name}` | {state} |")
              return "\n".join(lines)

          def write_if_changed(path: pathlib.Path, content: str) -> bool:
              old = path.read_text(encoding="utf-8") if path.exists() else ""
              if old.strip() == content.strip():
                  return False
              path.write_text(content, encoding="utf-8")
              return True

          def update_readme(block_md: str) -> bool:
              if not README.exists():
                  # create minimal README with markers
                  txt = f"# {pathlib.Path.cwd().name}\n\n## CI Coverage\n\n{START}\n{block_md}\n{END}\n"
                  return write_if_changed(README, txt)
              txt = README.read_text(encoding="utf-8")
              if START in txt and END in txt:
                  new = re.sub(
                      rf"{re.escape(START)}.*?{re.escape(END)}",
                      f"{START}\n{block_md}\n{END}",
                      txt,
                      flags=re.S
                  )
              else:
                  new = txt.rstrip() + f"\n\n## CI Coverage\n\n{START}\n{block_md}\n{END}\n"
              if new != txt:
                  README.write_text(new, encoding="utf-8")
                  return True
              return False

          def main():
              rows = scan()
              table = render_table(rows)
              status_md = f"# PR-safe Dispatcher Coverage\n\n{table}\n"
              changed1 = write_if_changed(STATUS_MD, status_md)
              badge_line = "_This table is auto-generated by AutoDocs._"
              block = f"{badge_line}\n\n{table}"
              changed2 = update_readme(block)
              if changed1 or changed2:
                  print("Updated AutoDocs outputs.")
              else:
                  print("No AutoDocs changes.")
          if __name__ == "__main__":
              main()

  - run_shell:
      name: Run PR-safe AutoDocs probe
      script: |
        set -euo pipefail
        python -m pip install --disable-pip-version-check --quiet pyyaml
        python scripts/autodocs_probe_pr_safe.py

  - commit:
      message: "docs(autodocs): update PR-safe dispatcher coverage (AutoPatch)"
