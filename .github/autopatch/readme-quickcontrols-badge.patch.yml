version: 1
actions:
  - write_files:
      - path: ".github/workflows/autopatch-readme-quickcontrols.yml"
        mode: "100644"
        contents: |
          name: Autopatch: README Quick Controls Badge

          on:
            workflow_dispatch: {}
            push:
              branches: [ "main" ]
              paths:
                - ".github/workflows/autopatch-wire-quick-controls.yml"
                - "README.md"
                - ".github/taskops/ledger.jsonl"
            workflow_run:
              workflows: [ "Autopatch: Wire Quick Controls" ]
              types: [ completed ]

          permissions:
            contents: write

          jobs:
            sync_readme:
              runs-on: ubuntu-latest
              steps:
                - name: Checkout
                  uses: actions/checkout@v4
                  with: { fetch-depth: 0 }

                - name: Update README badge + AutoPatch totals
                  id: update
                  shell: bash
                  run: |
                    set -euo pipefail

                    FILE="README.md"
                    BADGE_START="<!-- autopatch-wire-quick-controls:badge -->"
                    BADGE_END="<!-- /autopatch-wire-quick-controls:badge -->"
                    STATS_START="<!-- autopatch:totals -->"
                    STATS_END="<!-- /autopatch:totals -->"

                    REPO="${{ github.repository }}"
                    BADGE="[![Autopatch: Wire Quick Controls](https://github.com/${REPO}/actions/workflows/autopatch-wire-quick-controls.yml/badge.svg)](https://github.com/${REPO}/actions/workflows/autopatch-wire-quick-controls.yml)"

                    # Build the stats line from TaskOps ledger (latest autopatch-apply)
                    STATS_LINE="$(python - <<'PY'
                    import json, pathlib, datetime

                    led = pathlib.Path('.github/taskops/ledger.jsonl')
                    applied=noop=skipped=blocked=error=0
                    ts='n/a'
                    if led.exists():
                        last=None
                        with led.open('r', encoding='utf-8', errors='ignore') as f:
                            for line in f:
                                if not line.strip(): continue
                                try:
                                    j=json.loads(line)
                                except Exception:
                                    continue
                                if j.get('job')=='autopatch-apply':
                                    last=j
                        if last:
                            ts=last.get('ts','n/a')
                            def to_int(x): 
                                try: return int(str(x))
                                except: return 0
                            applied = to_int(last.get('applied',0))
                            noop    = to_int(last.get('noop',0))
                            skipped = to_int(last.get('skipped',0))
                            blocked = to_int(last.get('blocked',0))
                            error   = to_int(last.get('error',0))
                    print(f"AutoPatch totals → ✅ applied **{applied}** · ⏭ noop **{noop}** · ⚠️ skipped **{skipped}** · ⛔ blocked **{blocked}** · ❌ error **{error}** — _{ts}_")
                    PY
                    )"

                    if [ ! -f "$FILE" ]; then
                      echo "::error file=$FILE::README not found"
                      exit 1
                    fi

                    python - <<'PY'
                    import re, os, sys

                    file = "README.md"
                    with open(file, "r", encoding="utf-8") as f:
                        txt = f.read()

                    BADGE_START="<!-- autopatch-wire-quick-controls:badge -->"
                    BADGE_END="<!-- /autopatch-wire-quick-controls:badge -->"
                    STATS_START="<!-- autopatch:totals -->"
                    STATS_END="<!-- /autopatch:totals -->"

                    badge = os.environ.get("BADGE_MD","").strip()
                    stats = os.environ.get("STATS_MD","").strip()

                    def upsert_block(text, start, end, body):
                        block = f"{start}\n{body}\n{end}"
                        if start in text and end in text:
                            return re.sub(
                                rf"{re.escape(start)}.*?{re.escape(end)}",
                                block, text, flags=re.S
                            )
                        # If README has a “Badges” header, try to put under it; else, prepend at top
                        if "## " in text:
                            # Prepend at very top to keep it visible
                            return block + "\n\n" + text
                        return block + "\n\n" + text

                    before = txt
                    txt = upsert_block(txt, BADGE_START, BADGE_END, badge)
                    txt = upsert_block(txt, STATS_START, STATS_END, stats)

                    if txt != before:
                        with open(file, "w", encoding="utf-8") as f:
                            f.write(txt)
                        print("changed=true")
                    else:
                        print("changed=false")
                    PY \
                    | tee /tmp/changed.txt

                    CHANGED=$(grep -o 'changed=true' /tmp/changed.txt || true)
                    if [ -n "$CHANGED" ]; then
                      echo "changed=true" >> "$GITHUB_OUTPUT"
                    else
                      echo "changed=false" >> "$GITHUB_OUTPUT"
                    fi
                  env:
                    BADGE_MD: "${{ env.BADGE }}"
                    STATS_MD: "${STATS_LINE}"

                - name: Commit & push (if changed)
                  if: steps.update.outputs.changed == 'true'
                  run: |
                    git config user.name  "StegVerse Bot"
                    git config user.email "bot@stegverse.org"
                    git add README.md
                    git commit -m "autopatch(readme): sync Quick Controls badge + latest AutoPatch totals"
                    git push origin HEAD:main

                - name: Summary
                  if: always()
                  run: |
                    echo "## README Sync" >> "$GITHUB_STEP_SUMMARY"
                    echo "- Badge: Autopatch: Wire Quick Controls" >> "$GITHUB_STEP_SUMMARY"
                    echo "- Totals source: .github/taskops/ledger.jsonl" >> "$GITHUB_STEP_SUMMARY"
                    echo "- Changed: \`${{ steps.update.outputs.changed || 'false' }}\`" >> "$GITHUB_STEP_SUMMARY"

  - commit:
      message: "autopatch(readme): add badge + AutoPatch totals sync (auto-trigger on Quick Controls)"
