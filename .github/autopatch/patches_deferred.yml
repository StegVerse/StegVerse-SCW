version: 1
patches:
- id: bridge-min-apply-inline-v1
  enabled: true
  actions:
  - write_files:
    - path: hybrid-collab-bridge/.applied_bridge_min_inline_v1
      mode: '100644'
      contents: applied by AutoPatch (inline seed)
    - path: hybrid-collab-bridge/README.md
      mode: '100644'
      contents: '# hybrid-collab-bridge

        Minimal seed created by **inline** AutoPatch entry.

        Next patch in this same run will add API, providers, and CI.

        '
  - commit:
      message: 'init: hybrid bridge (minimal inline seed)'
- id: hybrid-collab-bridge-init-inline-v1
  enabled: true
  actions:
  - write_files:
    - path: hybrid-collab-bridge/.applied_hybrid-collab-bridge-init-inline-v1
      mode: '100644'
      contents: applied by AutoPatch (inline full scaffold)
    - path: hybrid-collab-bridge/.gitignore
      mode: '100644'
      contents: '__pycache__/

        *.pyc

        .venv/

        .env

        .env.*

        .mypy_cache/

        .pytest_cache/

        .ruff_cache/

        .vscode/

        .idea/

        sessions/**/artifacts/tmp/

        '
    - path: hybrid-collab-bridge/LICENSE
      mode: '100644'
      contents: 'MIT License

        Copyright (c) 2025 StegVerse


        Permission is hereby granted, free of charge, to any person obtaining a copy

        of this software and associated documentation files (the "Software"), to deal

        in the Software without restriction, including without limitation the rights

        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

        copies of the Software, and to permit persons to do so, subject to the following

        conditions:


        The above copyright notice and this permission notice shall be included in
        all

        copies or substantial portions of the Software.


        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        THE

        SOFTWARE.

        '
    - path: hybrid-collab-bridge/README.md
      mode: '100644'
      contents: "# hybrid-collab-bridge\n\nA **stand-alone hybrid bridge**: API orchestration\
        \ + human-coordination traces.\n- **Modular adapters**: starts with **Claude**;\
        \ add more experts later.\n- **Human-friendly**: every run writes a Markdown\
        \ session (`sessions/YYYY-MM-DD/<slug>/`)\n  with `context.md`, expert drafts,\
        \ and a referee merge for review.\n\n## Quick start\n```bash\n# 1) env\ncd\
        \ hybrid-collab-bridge\ncp .env.example .env\n# Fill: ANTHROPIC_API_KEY, ADMIN_TOKEN\n\
        \n# 2) run API\ncd api\npip install -r requirements.txt\nuvicorn app.main:app\
        \ --host 0.0.0.0 --port 8080 --reload\n```\n\n### Endpoints\n- `GET  /health`\n\
        - `POST /v1/run` \u2014 start a collaboration (writes session folder)\n- `POST\
        \ /v1/continue` \u2014 mark session reviewed and finalize\n\n**Example**\n\
        ```bash\nexport ADMIN_TOKEN=your_token\ncurl -s -X POST http://localhost:8080/v1/run\
        \ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-ADMIN-TOKEN: $ADMIN_TOKEN\"\
        \ \\\n  -d '{\n    \"slug\": \"first-claude-run\",\n    \"question\": \"Draft\
        \ a 2-sentence pitch for StegTalk and list 3 next steps.\",\n    \"context\"\
        : \"Audience: developers; emphasize privacy and onboarding.\",\n    \"experts\"\
        : [\"claude\"],\n    \"strategy\": \"consensus\",\n    \"human_gate\": true,\n\
        \    \"temperature\": 0.3\n  }' | jq .\n```\n\nOutputs go to `hybrid-collab-bridge/sessions/<today>/first-claude-run/`:\n\
        - `context.md`\n- `01_claude.md` (draft)\n- `03_referee.md` (merged / final\
        \ draft)\n\n## Add more experts later\n1) Create a provider in `api/app/providers/your_adapter.py`\n\
        2) Register it in `api/app/registry.py`\n3) Add an entry in `providers.yaml`\n\
        \nAdapters declare capabilities like `text-generate`, `image-generate`, `music-generate`.\n"
    - path: hybrid-collab-bridge/.env.example
      mode: '100644'
      contents: 'ADMIN_TOKEN=replace_me_admin

        # Claude

        ANTHROPIC_API_KEY=replace_me

        ANTHROPIC_MODEL=claude-3-5-sonnet-latest

        # Optional timeouts

        HTTP_TIMEOUT=60

        '
    - path: hybrid-collab-bridge/providers.yaml
      mode: '100644'
      contents: "providers:\n  - name: claude\n    type: anthropic_text\n    enabled:\
        \ true\n    capabilities: [\"text-generate\"]\n"
    - path: hybrid-collab-bridge/infra/docker-compose.yml
      mode: '100644'
      contents: "services:\n  bridge:\n    build:\n      context: ../api\n      dockerfile:\
        \ dockerfile\n    env_file:\n      - ../.env\n    ports:\n      - \"8080:8080\"\
        \n    volumes:\n      - ../sessions:/app/sessions\n      - ../providers.yaml:/app/providers.yaml:ro\n\
        \    restart: unless-stopped\n"
    - path: hybrid-collab-bridge/api/requirements.txt
      mode: '100644'
      contents: 'fastapi==0.115.0

        uvicorn==0.30.6

        httpx==0.27.2

        pydantic==2.9.2

        python-dotenv==1.0.1

        orjson==3.10.7

        pyyaml==6.0.2

        '
    - path: hybrid-collab-bridge/api/dockerfile
      mode: '100644'
      contents: 'FROM python:3.11-slim

        ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1

        WORKDIR /app

        COPY requirements.txt /app/

        RUN pip install --no-cache-dir -r requirements.txt

        COPY app /app/app

        COPY ../providers.yaml /app/providers.yaml

        EXPOSE 8080

        CMD ["uvicorn","app.main:app","--host=0.0.0.0","--port=8080"]

        '
    - path: hybrid-collab-bridge/api/app/__init__.py
      mode: '100644'
      contents: ''
    - path: hybrid-collab-bridge/api/app/models.py
      mode: '100644'
      contents: "from typing import List, Literal, Optional\nfrom pydantic import\
        \ BaseModel, Field\n\nStrategyName = Literal[\"consensus\",\"committee\"]\n\
        \nclass RunRequest(BaseModel):\n    slug: str = Field(..., description=\"\
        folder slug under sessions/YYYY-MM-DD/\")\n    question: str\n    context:\
        \ Optional[str] = None\n    experts: List[str] = Field(default_factory=lambda:\
        \ [\"claude\"])\n    strategy: StrategyName = \"consensus\"\n    human_gate:\
        \ bool = True\n    temperature: float = 0.4\n\nclass ContinueRequest(BaseModel):\n\
        \    session_path: str\n\nclass Turn(BaseModel):\n    who: str\n    output:\
        \ str\n\nclass RunResponse(BaseModel):\n    status: Literal[\"OK\",\"PAUSED_FOR_REVIEW\"\
        ]\n    session_path: str\n    strategy: StrategyName\n    turns: List[Turn]\
        \ = []\n    final: Optional[str] = None\n"
    - path: hybrid-collab-bridge/api/app/tasks.py
      mode: '100644'
      contents: "from typing import Literal, Dict, Any\n\nTaskType = Literal[\"text-generate\"\
        ]\n\nclass Task:\n    def __init__(self, task_type: TaskType, prompt: str,\
        \ options: Dict[str, Any] | None = None):\n        self.task_type = task_type\n\
        \        self.prompt = prompt\n        self.options = options or {}\n"
    - path: hybrid-collab-bridge/api/app/providers/base.py
      mode: '100644'
      contents: "from abc import ABC, abstractmethod\nfrom typing import List, Dict,\
        \ Any\nfrom ..tasks import Task\n\nclass Provider(ABC):\n    name: str\n \
        \   type: str\n    capabilities: List[str]\n\n    def __init__(self, name:\
        \ str, ptype: str, capabilities: List[str]):\n        self.name = name\n \
        \       self.type = ptype\n        self.capabilities = capabilities\n\n  \
        \  def supports(self, task_type: str) -> bool:\n        return task_type in\
        \ self.capabilities\n\n    @abstractmethod\n    async def run(self, task:\
        \ Task) -> Dict[str, Any]:\n        raise NotImplementedError\n"
    - path: hybrid-collab-bridge/api/app/providers/anthropic_text.py
      mode: '100644'
      contents: "import os, httpx\nfrom typing import Dict, Any\nfrom ..tasks import\
        \ Task\nfrom .base import Provider\n\nANTHROPIC_BASE = os.getenv(\"ANTHROPIC_BASE\"\
        ,\"https://api.anthropic.com\")\nANTHROPIC_MODEL = os.getenv(\"ANTHROPIC_MODEL\"\
        ,\"claude-3-5-sonnet-latest\")\nTIMEOUT = float(os.getenv(\"HTTP_TIMEOUT\"\
        ,\"60\"))\n\nclass AnthropicText(Provider):\n    def __init__(self, name:\
        \ str):\n        super().__init__(name, \"anthropic_text\", [\"text-generate\"\
        ])\n        key = os.getenv(\"ANTHROPIC_API_KEY\")\n        if not key:\n\
        \            raise RuntimeError(\"ANTHROPIC_API_KEY missing\")\n        self.headers\
        \ = {\"x-api-key\": key, \"anthropic-version\":\"2023-06-01\", \"content-type\"\
        :\"application/json\"}\n\n    async def run(self, task: Task) -> Dict[str,\
        \ Any]:\n        if task.task_type != \"text-generate\":\n            return\
        \ {\"error\":\"unsupported task\"}\n        payload = {\n            \"model\"\
        : ANTHROPIC_MODEL,\n            \"messages\": [{\"role\":\"user\",\"content\"\
        :task.prompt}],\n            \"max_tokens\": 1200,\n            \"temperature\"\
        : task.options.get(\"temperature\", 0.4),\n        }\n        async with httpx.AsyncClient(timeout=TIMEOUT)\
        \ as client:\n            r = await client.post(f\"{ANTHROPIC_BASE}/v1/messages\"\
        , headers=self.headers, json=payload)\n            r.raise_for_status()\n\
        \        data = r.json()\n        pieces = []\n        for block in data.get(\"\
        content\", []):\n            if block.get(\"type\") == \"text\":\n       \
        \         pieces.append(block.get(\"text\",\"\"))\n        return {\"text\"\
        : \"\\n\".join(pieces).strip()}\n"
    - path: hybrid-collab-bridge/api/app/registry.py
      mode: '100644'
      contents: "import yaml\nfrom typing import Dict, List\nfrom .providers.base\
        \ import Provider\nfrom .providers.anthropic_text import AnthropicText\n\n\
        FACTORY = {\n    \"anthropic_text\": AnthropicText,\n}\n\nclass ProviderRegistry:\n\
        \    def __init__(self, cfg_path: str = \"providers.yaml\"):\n        self.cfg_path\
        \ = cfg_path\n        self.providers: Dict[str, Provider] = {}\n        self.reload()\n\
        \n    def reload(self):\n        with open(self.cfg_path, \"r\", encoding=\"\
        utf-8\") as f:\n            cfg = yaml.safe_load(f)\n        self.providers\
        \ = {}\n        for p in cfg.get(\"providers\", []):\n            if not p.get(\"\
        enabled\", True):\n                continue\n            typ = p[\"type\"\
        ]; name = p[\"name\"]\n            cls = FACTORY.get(typ)\n            if\
        \ not cls: continue\n            self.providers[name] = cls(name)\n\n    def\
        \ get(self, name: str) -> Provider | None:\n        return self.providers.get(name)\n\
        \n    def list(self) -> List[str]:\n        return list(self.providers.keys())\n"
    - path: hybrid-collab-bridge/api/app/strategies.py
      mode: '100644'
      contents: "from typing import List, Dict, Any\nfrom .tasks import Task\nfrom\
        \ .registry import ProviderRegistry\n\nasync def consensus(reg: ProviderRegistry,\
        \ experts: List[str], prompt: str, opts: Dict[str,Any]) -> Dict[str, Any]:\n\
        \    proposals = []\n    for name in experts:\n        prov = reg.get(name)\n\
        \        if not prov or not prov.supports(\"text-generate\"):\n          \
        \  continue\n        out = await prov.run(Task(\"text-generate\", prompt,\
        \ opts))\n        proposals.append({\"who\": name, \"out\": out})\n\n    if\
        \ proposals:\n        referee = reg.get(experts[0])\n        merged_prompt\
        \ = \"Synthesize a concise final answer from these proposals:\\n\\n\"\n  \
        \      for p in proposals:\n            merged_prompt += f\"- {p['who']}:\
        \ {p['out'].get('text','')}\\n\"\n        merged = await referee.run(Task(\"\
        text-generate\", merged_prompt, {\"temperature\": 0.2}))\n    else:\n    \
        \    merged = {\"text\": \"No proposals.\"}\n\n    return {\"proposals\":\
        \ proposals, \"final\": merged}\n"
    - path: hybrid-collab-bridge/api/app/session_writer.py
      mode: '100644'
      contents: "import pathlib, datetime\n\ndef ensure_session(slug: str, base: str\
        \ = \"hybrid-collab-bridge/sessions\") -> pathlib.Path:\n    date = datetime.date.today().isoformat()\n\
        \    p = pathlib.Path(base) / date / slug\n    p.mkdir(parents=True, exist_ok=True)\n\
        \    (p / \"artifacts\").mkdir(exist_ok=True)\n    return p\n\ndef write_text(path:\
        \ pathlib.Path, name: str, text: str):\n    (path / name).write_text(text\
        \ or \"\", encoding=\"utf-8\")\n    return str(path / name)\n"
    - path: hybrid-collab-bridge/api/app/main.py
      mode: '100644'
      contents: "import os, pathlib\nfrom fastapi import FastAPI, Header, HTTPException\n\
        from fastapi.responses import JSONResponse\nfrom .models import RunRequest,\
        \ ContinueRequest, RunResponse, Turn\nfrom .registry import ProviderRegistry\n\
        from .session_writer import ensure_session, write_text\nfrom .strategies import\
        \ consensus\n\nADMIN_TOKEN = os.getenv(\"ADMIN_TOKEN\",\"\")\napp = FastAPI(title=\"\
        Hybrid Collab Bridge\", version=\"0.1.0\")\nREG = ProviderRegistry(cfg_path=\"\
        hybrid-collab-bridge/providers.yaml\")\n\n@app.get(\"/health\")\nasync def\
        \ health():\n    return {\"ok\": True, \"version\": \"0.1.0\", \"providers\"\
        : REG.list()}\n\ndef auth_or_403(token: str | None):\n    if not ADMIN_TOKEN:\n\
        \        return\n    if token != ADMIN_TOKEN:\n        raise HTTPException(status_code=403,\
        \ detail=\"Forbidden: bad admin token\")\n\n@app.post(\"/v1/run\", response_model=RunResponse)\n\
        async def run_collab(req: RunRequest, x_admin_token: str | None = Header(default=None)):\n\
        \    auth_or_403(x_admin_token)\n    session_dir = ensure_session(req.slug)\n\
        \    write_text(session_dir, \"context.md\", f\"# Question\\n{req.question}\\\
        n\\n## Context\\n{req.context or ''}\\n\")\n\n    text_prompt = f\"{req.question}\\\
        n\\nContext:\\n{req.context or ''}\\n\\nConstraints:\\n- Tone: concise\\n\"\
        \n    opts = {\"temperature\": req.temperature}\n    result = await consensus(REG,\
        \ req.experts, text_prompt, opts)\n\n    turns = []\n    idx = 1\n    for\
        \ p in result[\"proposals\"]:\n        fname = f\"{idx:02d}_{p['who']}.md\"\
        \n        write_text(session_dir, fname, p[\"out\"].get(\"text\",\"\"))\n\
        \        turns.append(Turn(who=p[\"who\"], output=p[\"out\"].get(\"text\"\
        ,\"\")))\n        idx += 1\n\n    final_text = result[\"final\"].get(\"text\"\
        ,\"\")\n    write_text(session_dir, \"03_referee.md\", final_text)\n\n   \
        \ status = \"PAUSED_FOR_REVIEW\" if req.human_gate else \"OK\"\n    return\
        \ JSONResponse(RunResponse(status=status, session_path=str(session_dir), strategy=req.strategy,\
        \ turns=turns, final=final_text).model_dump())\n\n@app.post(\"/v1/continue\"\
        , response_model=RunResponse)\nasync def continue_collab(req: ContinueRequest,\
        \ x_admin_token: str | None = Header(default=None)):\n    auth_or_403(x_admin_token)\n\
        \    p = pathlib.Path(req.session_path)\n    if not p.exists():\n        raise\
        \ HTTPException(404, \"Session path not found\")\n    final_text = \"\"\n\
        \    ref = p / \"03_referee.md\"\n    if ref.exists():\n        final_text\
        \ = ref.read_text(encoding=\"utf-8\").strip()\n    return JSONResponse(RunResponse(status=\"\
        OK\", session_path=str(p), strategy=\"consensus\", final=final_text, turns=[]).model_dump())\n"
    - path: hybrid-collab-bridge/sessions/.keep
      mode: '100644'
      contents: ''
    - path: hybrid-collab-bridge/.github/workflows/ci.yml
      mode: '100644'
      contents: "name: hybrid-bridge-ci\non: [push, pull_request]\njobs:\n  lint:\n\
        \    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\
        \      - uses: actions/setup-python@v5\n        with:\n          python-version:\
        \ \"3.11\"\n      - run: |\n          cd hybrid-collab-bridge/api && pip install\
        \ -r requirements.txt\n          python -m compileall app\n"
  - commit:
      message: 'init: hybrid bridge (Claude-first, modular adapters, human-coordination
        traces)'
