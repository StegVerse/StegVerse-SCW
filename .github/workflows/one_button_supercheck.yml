name: One-Button Supercheck (Diag + YAML Corrector + Repo Audit + Drift + Auto-Triage)

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: "API base URL (https://your-api.onrender.com). Leave blank to skip runtime diagnostics."
        required: false
        default: ""
      queue_key:
        description: "Worker queue key (informational)"
        required: false
        default: "queue:runs"
      timeout_sec:
        description: "Max seconds to wait for worker processing"
        required: false
        default: "75"
      poll_sec:
        description: "Poll interval seconds"
        required: false
        default: "3"
      auto_apply:
        description: "Apply safe triage (scaffold/move ATTIC/remove forbidden)"
        required: false
        default: "false"
      auto_commit:
        description: "Commit direct to main (else open PR)"
        required: false
        default: "false"

  # Mobile-friendly trigger
  push:
    branches: [ "main" ]
    paths:
      - ".github/trigger/supercheck/**"

permissions:
  contents: write
  pull-requests: write
  checks: write
  security-events: write

concurrency:
  group: supercheck-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 0) Baseline tools for all jobs
  setup:
    uses: ./.github/workflows/_reusables/setup-tools.yml
    with:
      actionlint: true
      yamllint:   true
      jq:         true
      curl:       true
      zip:        true

  # 1) Breadcrumb logging
  log_trigger:
    needs: [setup]
    uses: ./.github/workflows/_reusables/log-trigger.yml
    with:
      label: supercheck

  # 2) YAML Corrector + linters (always first)
  yamlfix:
    needs: [setup]
    uses: ./.github/workflows/_reusables/yaml-corrector.yml
    with:
      apply: true

  # 3) Runtime diagnostics (optional; only if api_base provided)
  diag:
    needs: [setup]
    uses: ./.github/workflows/_reusables/runtime-diagnostics.yml
    with:
      api_base:    ${{ github.event.inputs.api_base }}
      queue_key:   ${{ github.event.inputs.queue_key }}
      timeout_sec: ${{ github.event.inputs.timeout_sec }}
      poll_sec:    ${{ github.event.inputs.poll_sec }}
    timeout-minutes: 8

  # 4) Repo audit & drift (with safe seeding)
  audit:
    name: Repo Inventory + Drift + Self-Healing Scan
    needs: [setup, yamlfix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Seed helper scripts if missing
        run: |
          set -e
          mkdir -p scripts self_healing_out
          seed_py(){ f="$1"; shift; [ -f "scripts/$f" ] && return 0; cat > "scripts/$f" <<'PY'
# !/usr/bin/env python3
from pathlib import Path; import time
ROOT=Path(__file__).resolve().parents[1]; OUT=ROOT/"self_healing_out"; OUT.mkdir(parents=True, exist_ok=True)
(Path(OUT)/f"__placeholder_{__file__.split('/')[-1]}.md").write_text(f"Ran placeholder at {time.time()}\n")
print("OK")
PY
          }
          seed_py repo_audit.py
          seed_py topic_drift_audit.py
          seed_py collect_self_healing.py

      - name: Repo Inventory & Diff
        run: python3 scripts/repo_audit.py

      - name: Topic Drift Auditor
        run: python3 scripts/topic_drift_audit.py

      - name: Self-Healing Scan (manifest)
        run: python3 scripts/collect_self_healing.py

      - name: Upload repo audit bundle
        uses: ./.github/workflows/_reusables/upload-bundle.yml
        with:
          name: repo_audit_bundle
          paths: |
            self_healing_out/REPO_INVENTORY.*
            self_healing_out/REPO_DIFF.json
            self_healing_out/DRIFT_REPORT.*
            self_healing_out/SELF_HEALING_MANIFEST.*

  # 5) Auto-triage (plan + optional apply), then artifact
  triage:
    name: Auto-Triage (plan + optional apply)
    needs: [audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps (PyYAML)
        run: |
          python3 -m pip install --upgrade pip
          pip install pyyaml

      - name: Ensure intent & triage rules
        run: |
          set -e
          mkdir -p .steg scripts self_healing_out

          if [ ! -f .steg/INTENT.yml ]; then
            cat > .steg/INTENT.yml <<'YML'
version: 1
required:
  dirs: ["scripts", ".github/workflows", "self_healing_out"]
  files: []
forbidden_globs:
  - "**/*.env"
  - "**/secrets.*"
  - "**/*.pem"
  - "**/*.key"
  - "**/*.crt"
  - "private/**"
attic_policy:
  enable: true
  header:
    why: "Parked by auto-triage per INTENT"
    how_to_restore: "Move out of ATTIC/ and re-link imports if needed"
  exclude:
    - "docs/**"
    - "tests/**"
    - "ATTIC/**"
YML
          fi

          if [ ! -f scripts/triage_rules.json ]; then
            cat > scripts/triage_rules.json <<'JSON'
{
  "version": 1,
  "attic": {
    "move_if_globs": ["experiments/**", "tmp/**", "scratch/**"],
    "exclude_globs": ["docs/**", "tests/**", "ATTIC/**"]
  },
  "remove_forbidden": [
    "**/*.env", "**/secrets.*", "**/*.pem", "**/*.key", "**/*.crt", "private/**"
  ],
  "scaffold": {
    "dirs": ["scripts", ".github/workflows", "self_healing_out"],
    "files": []
  }
}
JSON
          fi

          if [ ! -f scripts/auto_triage.py ]; then
            echo "::warning ::scripts/auto_triage.py not found; seeding no-op placeholder."
            cat > scripts/auto_triage.py <<'PY'
#!/usr/bin/env python3
import os, json
from pathlib import Path
ROOT = Path(__file__).resolve().parents[1]
OUT = ROOT / "self_healing_out"; OUT.mkdir(parents=True, exist_ok=True)
plan = {"remove_forbidden": [], "move_to_attic": [], "scaffold_dirs": [], "scaffold_files": [], "keep": []}
(OUT/"AUTO_TRIAGE_PLAN.json").write_text(json.dumps(plan, indent=2), encoding="utf-8")
(OUT/"AUTO_TRIAGE_REPORT.md").write_text("# Auto-Triage Plan\n\n(no-op placeholder)\n", encoding="utf-8")
print("OK")
PY
            chmod +x scripts/auto_triage.py
          fi

      - name: Run auto_triage (apply optional)
        env:
          APPLY: ${{ github.event.inputs.auto_apply }}
        run: |
          if [ "${APPLY}" = "true" ]; then
            APPLY=1 python3 scripts/auto_triage.py
          else
            python3 scripts/auto_triage.py
          fi

      - name: Upload auto-triage bundle
        uses: ./.github/workflows/_reusables/upload-bundle.yml
        with:
          name: auto_triage_bundle
          paths: |
            self_healing_out/AUTO_TRIAGE_PLAN.json
            self_healing_out/AUTO_TRIAGE_REPORT.md

  # 6) Commit or PR changes (only if auto_apply)
  commit_or_pr:
    name: Commit or PR changes
    needs: [triage]
    if: ${{ github.event.inputs.auto_apply == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Commit to main or open PR
        env:
          DO_COMMIT: ${{ github.event.inputs.auto_commit }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          git config user.name "supercheck-bot"
          git config user.email "bot@stegverse.local"

          if [ "$DO_COMMIT" = "true" ]; then
            git add -A
            git commit -m "supercheck(auto): apply safe triage (scaffold/move ATTIC/remove forbidden)" || echo "No changes"
            git push origin HEAD:main || true
          else
            BR="supercheck/triage-${GITHUB_RUN_ID}"
            git checkout -b "$BR"
            git add -A
            git commit -m "supercheck(auto): apply safe triage (scaffold/move ATTIC/remove forbidden)" || echo "No changes"
            git push origin "$BR" || true

            TITLE="Supercheck: safe triage (auto)"
            BODY="This PR was created by One-Button Supercheck.

- Scaffolds missing files/dirs
- Moves extras to ATTIC with @attic headers
- Removes forbidden files

Review the 'supercheck_bundle' artifact for details."

            curl -sS -X POST \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              -d "$(jq -nc --arg t "$TITLE" --arg b "$BODY" --arg head "$BR" '{"title":$t,"body":$b,"head":$head,"base":"main","maintainer_can_modify":true}')" \
              "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls" >/dev/null || true

  # 7) Assemble one human-readable report (downloads prior artifacts)
  assemble:
    name: Assemble Supercheck Report
    needs: [yamlfix, diag, audit, triage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: |
            yaml_corrector_bundle
            runtime_diag
            repo_audit_bundle
            auto_triage_bundle
          path: _in
          merge-multiple: true

      - name: Build report (markdown)
        run: |
          set -e
          mkdir -p out self_healing_out
          RPT="out/supercheck_report.md"
          echo "# Supercheck Report" > "$RPT"
          echo "" >> "$RPT"

          echo "## YAML Corrector" >> "$RPT"
          cat _in/YAML_CORRECTOR_REPORT.md 2>/dev/null || echo "(no YAML report)" >> "$RPT"
          echo "" >> "$RPT"

          if [ -f "_in/supercheck_diag.json" ]; then
            OK="$(jq -r '.ok' _in/supercheck_diag.json 2>/dev/null || echo null)"
            BADGE="(skipped)"
            [ "$OK" = "true" ] && BADGE="✅ PASS"
            [ "$OK" = "false" ] && BADGE="❌ FAIL"
            echo "## API/Worker Diagnostics — $BADGE" >> "$RPT"
            echo "" >> "$RPT"
            jq -S . _in/supercheck_diag.json | head -c 180000 | sed 's/^/    /' >> "$RPT"
            echo "" >> "$RPT"
          fi

          echo "## Repo Inventory & Diff" >> "$RPT"
          cat _in/REPO_INVENTORY.md 2>/dev/null || echo "(no inventory)" >> "$RPT"
          echo "" >> "$RPT"

          echo "## Drift Report" >> "$RPT"
          cat _in/DRIFT_REPORT.md 2>/dev/null || echo "(no drift report)" >> "$RPT"
          echo "" >> "$RPT"

          echo "## Self-Healing Manifest" >> "$RPT"
          cat _in/SELF_HEALING_MANIFEST.md 2>/dev/null || echo "(no manifest)" >> "$RPT"
          echo "" >> "$RPT"

          echo "## Auto-Triage Plan" >> "$RPT"
          cat _in/AUTO_TRIAGE_REPORT.md 2>/dev/null || echo "(no auto-triage report)" >> "$RPT"
          echo "" >> "$RPT"

      - name: Upload consolidated bundle
        uses: ./.github/workflows/_reusables/upload-bundle.yml
        with:
          name: supercheck_bundle
          paths: |
            out/supercheck_report.md
            _in/**

  # 8) Last-two telemetry (final status)
  telemetry:
    needs: [assemble]
    uses: ./.github/workflows/_reusables/telemetry.yml
    with:
      basename: supercheck
      status: ${{ needs.assemble.result }}
