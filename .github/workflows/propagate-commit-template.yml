name: propagate-commit-template

on:
  workflow_dispatch:
    inputs:
      repos_csv:
        description: "Comma-separated list of repos (owner/repo,owner/repo)"
        required: true
      pr_branch:
        description: "Branch name to push (leave blank to auto-generate)"
        required: false
        default: ""
      template_version:
        description: "Template version tag (e.g., v1.0, v1.1)"
        required: false
        default: "v1.0"

permissions:
  contents: write

concurrency:
  group: propagate-commit-template
  cancel-in-progress: false

jobs:
  propagate:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Run propagation script
        env:
          STEGVERSE_BOT_TOKEN: ${{ secrets.STEGVERSE_BOT_TOKEN }}
          REPOS_CSV_INPUT: ${{ inputs.repos_csv }}
          PR_BRANCH_INPUT: ${{ inputs.pr_branch }}
          TEMPLATE_VERSION: ${{ inputs.template_version }}
        run: |
          python - <<'PY'
          import os, json, subprocess, pathlib, sys, textwrap, urllib.request, urllib.error

          token = os.getenv("STEGVERSE_BOT_TOKEN")
          if not token:
              print("‚ùå Missing secret: STEGVERSE_BOT_TOKEN", file=sys.stderr)
              sys.exit(1)

          csv = (os.getenv("REPOS_CSV_INPUT") or "").strip()
          repos = [r.strip() for r in csv.split(",") if r.strip()]
          if not repos:
              print("‚ùå No repos provided.", file=sys.stderr)
              sys.exit(1)

          version = os.getenv("TEMPLATE_VERSION") or "v1.0"
          pr_branch = (os.getenv("PR_BRANCH_INPUT") or "").strip()
          if not pr_branch:
              pr_branch = f"chore/commit-template-{version}"

          commit_template = textwrap.dedent(f"""\
          # üß≠ StegVerse Commit Template ({version})
          # Lines starting with # are ignored.
          <type>(<scope>): <summary>
          # feat(api): add provider registry for hybrid bridge
          #
          # Body (optional): details on what changed and why
          #
          # Footer (optional): references, automation tags, etc.
          # Refs: #42
          # Signed-off-by: Name <email@example.com>
          """)

          patch_commit = f'''version: 1
actions:
  - write_files:
      - path: "templates/commit_template.txt"
        mode: "100644"
        contents: |
{textwrap.indent(commit_template, "          ")}
  - commit:
      message: "chore(templates): add universal commit message template ({version})"
'''

          patch_config = """version: 1
actions:
  - run_shell:
      name: Configure Git to use commit template
      script: |
        set -e
        if [ -f templates/commit_template.txt ]; then
          git config commit.template templates/commit_template.txt
          echo "[AutoPatch] Commit template configured successfully."
        else:
          echo "[AutoPatch] Warning: commit_template.txt not found ‚Äî skipping."
        fi
  - commit:
      message: "chore(autopatch): auto-configure commit template"
"""

          def open_pr(repo, branch):
              data = json.dumps({
                  "title": f"chore(templates): add universal commit template {version} + autopatch config",
                  "head": branch,
                  "base": "main",
                  "body": f"Adds a universal commit template **{version}** and autopatch config for consistent message conventions."
              }).encode()
              req = urllib.request.Request(f"https://api.github.com/repos/{repo}/pulls", data=data, method="POST")
              req.add_header("Authorization", f"token {token}")
              req.add_header("Accept", "application/vnd.github+json")
              try:
                  with urllib.request.urlopen(req) as resp:
                      j = json.loads(resp.read())
                      print(f"‚úÖ PR opened for {repo}: {j.get('html_url')}")
              except urllib.error.HTTPError as e:
                  print(f"‚ö†Ô∏è  PR failed for {repo}: {e.code} {e.read().decode()}", file=sys.stderr)

          for repo in repos:
              print(f"\n=== Processing {repo} ===")
              repo_dir = pathlib.Path(repo.replace("/", "__"))
              subprocess.run(["git", "clone", f"https://x-access-token:{token}@github.com/{repo}.git", str(repo_dir)], check=True)
              subprocess.run(["git", "-C", str(repo_dir), "checkout", "-B", pr_branch], check=True)

              # Configure bot identity
              subprocess.run(["git", "-C", str(repo_dir), "config", "user.name", "StegVerse Bot"], check=True)
              subprocess.run(["git", "-C", str(repo_dir), "config", "user.email", "bot@stegverse.org"], check=True)

              ap_dir = repo_dir / ".github" / "autopatch"
              ap_dir.mkdir(parents=True, exist_ok=True)

              (ap_dir / "commit-template.patch.yml").write_text(patch_commit, encoding="utf-8")
              (ap_dir / "commit-template-config.patch.yml").write_text(patch_config, encoding="utf-8")

              patches_file = ap_dir / "patches.yml"
              if not patches_file.exists():
                  patches_file.write_text("version: 1\npatches: []\n", encoding="utf-8")
              txt = patches_file.read_text(encoding="utf-8")
              if "commit-template.patch.yml" not in txt:
                  txt += "\n  - id: commit-template\n    path: .github/autopatch/commit-template.patch.yml"
              if "commit-template-config.patch.yml" not in txt:
                  txt += "\n  - id: commit-template-config\n    path: .github/autopatch/commit-template-config.patch.yml"
              patches_file.write_text(txt, encoding="utf-8")

              subprocess.run(["git", "-C", str(repo_dir), "add", "-A"], check=True)
              has_changes = subprocess.run(["git", "-C", str(repo_dir), "diff", "--cached", "--quiet"]).returncode != 0
              if not has_changes:
                  print(f"‚è≠  {repo}: no changes needed for {version}.")
                  continue

              subprocess.run([
                  "git", "-C", str(repo_dir), "commit",
                  "-m", f"chore(templates): add universal commit template {version} + autopatch config"
              ], check=True)

              try:
                  subprocess.run(["git", "-C", str(repo_dir), "push", "-u", "origin", pr_branch], check=True)
              except subprocess.CalledProcessError:
                  print(f"‚ö†Ô∏è  Push rejected for {repo} ‚Äî attempting rebase")
                  subprocess.run(["git", "-C", str(repo_dir), "fetch", "origin", pr_branch], check=True)
                  subprocess.run(["git", "-C", str(repo_dir), "rebase", f"origin/{pr_branch}"], check=True)
                  subprocess.run(["git", "-C", str(repo_dir), "push", "-u", "origin", pr_branch], check=True)

              open_pr(repo, pr_branch)

          print("\n‚úÖ Propagation finished successfully.")
          PY
