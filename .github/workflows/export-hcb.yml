name: export-hcb

on:
  workflow_dispatch:
    inputs:
      target_owner:
        description: "Destination owner/org (e.g., StegVerse)"
        required: true
        default: "StegVerse"
      target_repo:
        description: "Destination repo name"
        required: true
        default: "hybrid-collab-bridge"
      tag_name:
        description: "Tag to create (e.g., v0.1.0). Leave blank to skip tagging."
        required: false
        default: "v0.1.0"
      release_title:
        description: "Release title (optional)"
        required: false
        default: "Hybrid Collab Bridge"
      release_notes:
        description: "Release notes (optional; if blank and tag present, auto-generate)"
        required: false
        default: ""
      force_push:
        description: "Force-push snapshot (overwrites remote)"
        required: false
        default: "true"
      create_release:
        description: "Create a GitHub Release when tag_name is provided"
        required: false
        default: "true"
  push:
    paths:
      - "hybrid-collab-bridge/**"

permissions:
  contents: write

jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout SCW
        uses: actions/checkout@v4

      - name: Prepare snapshot
        id: prep
        run: |
          set -euo pipefail
          test -d hybrid-collab-bridge || { echo "hybrid-collab-bridge/ not found"; exit 1; }
          mkdir -p /tmp/hcb-export
          rsync -a --delete hybrid-collab-bridge/ /tmp/hcb-export/
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Write VERSION file (if tag provided)
        env:
          TAG_NAME: ${{ github.event.inputs.tag_name }}
        run: |
          set -euo pipefail
          if [ -n "${TAG_NAME:-}" ]; then
            echo "${TAG_NAME}" > /tmp/hcb-export/VERSION
          fi

      - name: Push to standalone repo
        env:
          TOKEN: ${{ secrets.STEGVERSE_BOT_TOKEN }}
          OWNER: ${{ github.event.inputs.target_owner || 'StegVerse' }}
          REPO:  ${{ github.event.inputs.target_repo  || 'hybrid-collab-bridge' }}
          FORCE: ${{ github.event.inputs.force_push   || 'true' }}
        run: |
          set -euo pipefail
          cd /tmp/hcb-export

          git init -b main
          git config user.name "StegVerse Bot"
          git config user.email "bot@stegverse.org"
          git add -A
          git commit -m "export: snapshot from StegVerse-SCW @ ${{ steps.prep.outputs.sha }}"

          url="https://x-access-token:${TOKEN}@github.com/${OWNER}/${REPO}.git"
          git remote add origin "$url"

          if [ "${FORCE}" = "true" ]; then
            git push -f origin main
          else
            git push origin main
          fi

      - name: Create tag and push (if requested)
        if: ${{ inputs.tag_name != '' }}
        env:
          TOKEN: ${{ secrets.STEGVERSE_BOT_TOKEN }}
          OWNER: ${{ github.event.inputs.target_owner || 'StegVerse' }}
          REPO:  ${{ github.event.inputs.target_repo  || 'hybrid-collab-bridge' }}
          TAG:   ${{ github.event.inputs.tag_name }}
        run: |
          set -euo pipefail
          cd /tmp/hcb-export
          # Create an annotated tag at HEAD
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"

      - name: Create GitHub Release (optional)
        if: ${{ inputs.tag_name != '' && inputs.create_release == 'true' }}
        env:
          TOKEN: ${{ secrets.STEGVERSE_BOT_TOKEN }}
          OWNER: ${{ github.event.inputs.target_owner || 'StegVerse' }}
          REPO:  ${{ github.event.inputs.target_repo  || 'hybrid-collab-bridge' }}
          TAG:   ${{ github.event.inputs.tag_name }}
          TITLE: ${{ github.event.inputs.release_title }}
          NOTES: ${{ github.event.inputs.release_notes }}
        run: |
          set -euo pipefail
          # If notes are blank, ask GitHub to auto-generate
          if [ -z "${NOTES}" ]; then
            body='{"tag_name":"'"${TAG}"'","name":"'"${TITLE}"'","generate_release_notes":true}'
          else
            # Escape quotes for JSON
            esc_notes=$(printf '%s' "${NOTES}" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')
            body='{"tag_name":"'"${TAG}"'","name":"'"${TITLE}"'","body":'"${esc_notes}"'}'
          fi

          curl -sSf -X POST \
            -H "Authorization: token ${TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d "${body}" \
            "https://api.github.com/repos/${OWNER}/${REPO}/releases"
