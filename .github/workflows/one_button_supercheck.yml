name: One-Button Supercheck (Diag + YAML Corrector + Repo Audit + Drift + Auto-Triage)

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: "API base URL (e.g., https://your-api.onrender.com). Leave blank to skip runtime diagnostics."
        required: false
        default: ""
      queue_key:
        description: "Worker queue key"
        required: false
        default: "queue:runs"
      timeout_sec:
        description: "Max seconds to wait for worker processing"
        required: false
        default: "75"
      poll_sec:
        description: "Poll interval seconds"
        required: false
        default: "3"
      auto_apply:
        description: "Apply safe fixes autonomously (scaffold required, move extras to ATTIC, remove forbidden)"
        required: false
        default: "false"
      auto_commit:
        description: "Commit fixes directly to main (else PR)"
        required: false
        default: "false"

  # File-based triggers (mobile friendly)
  push:
    branches: [ "main" ]
    paths:
      - ".github/trigger/supercheck/**"

permissions:
  contents: write
  pull-requests: write
  checks: write
  security-events: write

concurrency:
  group: supercheck-${{ github.ref }}
  cancel-in-progress: true

jobs:
  supercheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y jq curl zip || true
          python3 -V

      - name: Log trigger (breadcrumb trail)
        run: |
          mkdir -p self_healing_out
          echo "{\"ts\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"run_id\":\"${GITHUB_RUN_ID}\",\"attempt\":${GITHUB_RUN_ATTEMPT},\"actor\":\"${GITHUB_ACTOR}\",\"trigger\":\"${{ github.event_name }}:${{ github.ref }}\",\"run_url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" >> self_healing_out/TRIGGER_EVENTS.jsonl

      # ---- Stage A: YAML Corrector v2 (always run first) ----
      - name: Install YAML Corrector deps
        run: |
          python3 -m pip install --upgrade pip
          pip install ruamel.yaml yamllint

      - name: Run YAML Corrector v2
        run: |
          mkdir -p self_healing_out
          if [ -f scripts/yaml_corrector_v2.py ]; then
            python3 scripts/yaml_corrector_v2.py --apply || true
          else
            echo "# YAML Corrector: script missing (scripts/yaml_corrector_v2.py)" > self_healing_out/YAML_CORRECTOR_REPORT.md
            echo "{}" > self_healing_out/YAML_CORRECTOR_REPORT.json
          fi

      - name: Validate workflows (actionlint + yamllint)
        continue-on-error: true
        run: |
          curl -sSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash
          ./actionlint -color -shellcheck= || true
          yamllint -f parsable .github/workflows || true

      - name: Upload YAML Corrector Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yaml_corrector_bundle
          path: |
            self_healing_out/YAML_CORRECTOR_REPORT.*
          if-no-files-found: warn

      # (Optional compatibility: run legacy precision/sweep if present)
      - name: Legacy Fix-It (if present)
        run: |
          if [ -f scripts/validate_and_fix.py ]; then
            python3 scripts/validate_and_fix.py --apply || true
          fi
      - name: Legacy Sweep-All (if present)
        run: |
          if [ -f scripts/sweep_all_workflows.py ]; then
            python3 scripts/sweep_all_workflows.py --apply || true
          fi

      # ---- Stage B: Runtime Diagnostics ----
      - name: Runtime diagnostics (API + Worker)
        id: diag
        env:
          API_BASE:   ${{ github.event.inputs.api_base }}
          QUEUE_KEY:  ${{ github.event.inputs.queue_key }}
          TIMEOUT_SEC: ${{ github.event.inputs.timeout_sec }}
          POLL_SEC:   ${{ github.event.inputs.poll_sec }}
        run: |
          set -euo pipefail
          API="${API_BASE}"
          if [ -z "$API" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            printf '{"ok":null,"skipped":true}\n' > supercheck_diag.json
            exit 0
          fi
          sudo apt-get install -y curl jq >/dev/null 2>&1 || true
          API="$(echo "$API" | sed 's:/*$::')"
          get(){ curl -sS -w "\n%{http_code}" "$1"; }
          post(){ curl -sS -w "\n%{http_code}" -X POST "$1" -H "Content-Type: application/json" -d "{}"; }
          pass=true; report='{"api_base":"'"$API"'","steps":[],"ok":false}'
          add(){ report=$(jq -c --arg n "$1" --argjson ok $2 --argjson data "$3" --arg e "${4:-}" '.steps += [{"name":$n,"ok":$ok,"data":$data,"error":(($e|length>0)?$e:null)}]' <<<"$report"); }
          read -r b s < <(get "$API/v1/ops/health"); if [ "${s:-500}" = "200" ]; then add "GET /v1/ops/health" true "$(echo "$b"|jq -S .)" ""; else add "GET /v1/ops/health" false null "HTTP $s"; pass=false; fi
          read -r b s < <(get "$API/v1/ops/env/required"); if [ "${s:-500}" = "200" ]; then add "GET /v1/ops/env/required" true "$(echo "$b"|jq -S .)" ""; else add "GET /v1/ops/env/required" false null "HTTP $s"; pass=false; fi
          read -r b s < <(get "$API/v1/ops/metrics"); if [ "${s:-500}" = "200" ]; then PB=$(echo "$b"|jq -r '.processed // 0'); add "GET /v1/ops/metrics (before)" true "$(echo "$b"|jq -S .)" ""; else add "GET /v1/ops/metrics (before)" false null "HTTP $s"; pass=false; fi
          read -r b s < <(post "$API/v1/ops/queue/test"); if [ "${s:-500}" = "200" ] && [ "$(echo "$b"|jq -r '.queued // false')" = "true" ]; then add "POST /v1/ops/queue/test" true "$(echo "$b"|jq -S .)" ""; else add "POST /v1/ops/queue/test" false null "HTTP $s"; pass=false; fi
          end=$(( $(date +%s) + ${TIMEOUT_SEC} )); snaps="[]"; PA="$PB"
          if [ "$pass" = true ]; then
            while [ $(date +%s) -lt $end ]; do
              sleep "${POLL_SEC}"; read -r b s < <(get "$API/v1/ops/metrics")
              if [ "${s:-500}" = "200" ]; then snaps=$(jq -c --argjson s "$(echo "$b"|jq -S .)" '.+=[ $s ]' <<<"$snaps"); val=$(echo "$b"|jq -r '.processed // 0'); PA=$val; [ "$PA" -gt "$PB" ] && break; fi
            done
            ok=$([ "$PA" -gt "$PB" ] && echo true || echo false)
            add "Poll metrics until processed increases" "$ok" "$snaps" "before=$PB after=$PA timeout=${TIMEOUT_SEC}s"
            [ "$ok" = true ] || pass=false
          fi
          report=$(jq -c --argjson ok $([ "$pass" = true ] && echo true || echo false) '.ok=$ok' <<<"$report")
          echo "$report" | jq -S . > supercheck_diag.json
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "ok=$pass" >> $GITHUB_OUTPUT

      # ---- Stage C: Repo Audit & Drift ----
      - name: Repo Inventory & Diff
        run: python3 scripts/repo_audit.py

      - name: Topic Drift Auditor
        run: python3 scripts/topic_drift_audit.py

      # ---- Stage D: Self-Healing Scan ----
      - name: Self-Healing Scan (minimal)
        run: python3 scripts/collect_self_healing.py

      # ---- Stage E: Auto-Triage ----
      - name: Auto-Triage (plan + optional apply)
        env:
          APPLY: ${{ github.event.inputs.auto_apply }}
        run: |
          if [ "${APPLY}" = "true" ]; then APPLY=1 python3 scripts/auto_triage.py; else python3 scripts/auto_triage.py; fi

      # ---- Stage F: Commit/PR if auto_apply ----
      - name: Commit or PR changes
        if: ${{ github.event.inputs.auto_apply == 'true' }}
        env:
          DO_COMMIT: ${{ github.event.inputs.auto_commit }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          git config user.name "supercheck-bot"
          git config user.email "bot@stegverse.local"
          if [ "$DO_COMMIT" = "true" ]; then
            git add -A
            git commit -m "supercheck(auto): apply safe triage (scaffold/move ATTIC/remove forbidden)" || echo "No changes"
            git push origin HEAD:main || true
          else
            BR="supercheck/triage-${GITHUB_RUN_ID}"
            git checkout -b "$BR"
            git add -A
            git commit -m "supercheck(auto): apply safe triage (scaffold/move ATTIC/remove forbidden)" || echo "No changes"
            git push origin "$BR" || true
            TITLE="Supercheck: safe triage (auto)"
            BODY="This PR was created by One-Button Supercheck.\n\n- Scaffolds missing files/dirs\n- Moves extras to ATTIC with @attic headers\n- Removes forbidden files\n\nReview the artifact 'supercheck_bundle' for details."
            curl -sS -X POST \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              -d "$(jq -nc --arg t "$TITLE" --arg b "$BODY" --arg head "$BR" '{"title":$t,"body":$b,"head":$head,"base":"main","maintainer_can_modify":true}')" \
              "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls" >/dev/null || true

      # ---- Stage G: Assemble Human-Readable Report ----
      - name: Assemble Supercheck Report
        run: |
          set -e
          echo "# Supercheck Report" > supercheck_report.md
          echo "" >> supercheck_report.md
          echo "## YAML Corrector" >> supercheck_report.md
          cat self_healing_out/YAML_CORRECTOR_REPORT.md >> supercheck_report.md || echo "(no YAML report)" >> supercheck_report.md
          echo "" >> supercheck_report.md

          if [ -f supercheck_diag.json ]; then
            OK=$(jq -r '.ok' supercheck_diag.json 2>/dev/null || echo null)
            if [ "$OK" != "null" ]; then
              BADGE=$([ "$OK" = "true" ] && echo "✅ PASS" || echo "❌ FAIL")
              echo "## API/Worker Diagnostics — $BADGE" >> supercheck_report.md
              echo "" >> supercheck_report.md
              jq -S . supercheck_diag.json | head -c 180000 | sed 's/^/    /' >> supercheck_report.md
              echo "" >> supercheck_report.md
            fi
          fi

          echo "## Repo Inventory & Diff" >> supercheck_report.md
          echo "" >> supercheck_report.md
          cat self_healing_out/REPO_INVENTORY.md >> supercheck_report.md || true
          echo "" >> supercheck_report.md

          echo "## Drift Report" >> supercheck_report.md
          echo "" >> supercheck_report.md
          cat self_healing_out/DRIFT_REPORT.md >> supercheck_report.md || true
          echo "" >> supercheck_report.md

          echo "## Self-Healing Manifest" >> supercheck_report.md
          echo "" >> supercheck_report.md
          cat self_healing_out/SELF_HEALING_MANIFEST.md >> supercheck_report.md || true
          echo "" >> supercheck_report.md

          echo "## Auto-Triage Plan" >> supercheck_report.md
          echo "" >> supercheck_report.md
          cat self_healing_out/AUTO_TRIAGE_REPORT.md >> supercheck_report.md || true
          echo "" >> supercheck_report.md

      - name: Record outcome (last-two)
        if: always()
        run: |
          set -e
          mkdir -p self_healing_out
          echo "STATUS=${{ job.status }}" >> $GITHUB_ENV
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          SHA="$(git rev-parse --short HEAD || echo unknown)"
          RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          LEDGER="self_healing_out/TRIGGER_EVENTS_${{ github.workflow }}.jsonl"
          echo "{\"ts\":\"$TS\",\"status\":\"${{ job.status }}\",\"sha\":\"$SHA\",\"run_url\":\"$RUN_URL\",\"actor\":\"${GITHUB_ACTOR}\"}" >> "$LEDGER"

          # Rebuild "last two" JSON + MD
          LAST_JSON="self_healing_out/LAST_TWO_<NAME>.json"
          LAST_MD="self_healing_out/LAST_TWO_<NAME>.md"
          tail -n 2 "$LEDGER" | jq -s '.' > "$LAST_JSON" || echo "[]" > "$LAST_JSON"

          {
            echo "### Last two <NAME> outcomes"
            jq -r '.[] | "- **\(.status | ascii_upcase)** — \(.ts) — `\(.sha)`  [(run)](\(.run_url)) by \(.actor)"' "$LAST_JSON" 2>/dev/null || true
          } > "$LAST_MD"

      - name: Upload last-two summary (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: last_two_<NAME>
          path: |
            self_healing_out/LAST_TWO_<NAME>.json
            self_healing_out/LAST_TWO_<NAME>.md
          if-no-files-found: warn

      # ---- Stage H: Upload Final Bundle ----
      - name: Upload Supercheck Bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: supercheck_bundle
          path: |
            supercheck_report.md
            supercheck_diag.json
            self_healing_out/**
          if-no-files-found: warn
