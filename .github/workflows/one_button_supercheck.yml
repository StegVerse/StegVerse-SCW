name: One-Button Supercheck (Preflight + Diag + Audit + Auto-Triage)

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: "API base URL (blank = skip diagnostics)"
        required: false
        default: ""
      queue_key:
        description: "Worker queue key"
        required: false
        default: "queue:runs"
      timeout_sec:
        description: "Max seconds to wait for worker"
        required: false
        default: "75"
      poll_sec:
        description: "Poll interval seconds"
        required: false
        default: "3"
      auto_apply:
        description: "Apply safe repo triage (scaffold/move ATTIC/remove forbidden)"
        required: false
        default: "false"
      auto_commit:
        description: "Commit changes directly to main (else: open PR)"
        required: false
        default: "false"
      preflight_apply:
        description: "Apply workflow YAML fixes"
        required: false
        default: "true"
      preflight_autocommit:
        description: "Auto-commit normalized workflows"
        required: false
        default: "true"
  push:
    paths:
      - ".github/trigger/supercheck/**"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: supercheck-${{ github.ref }}
  cancel-in-progress: true

jobs:
  supercheck:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          python3 -V

      # ---- Read trigger files & merge with inputs ----
      - name: Read trigger flags (autorun controls)
        id: flags
        run: |
          set -e
          TRG=".github/trigger/supercheck"
          mkdir -p "$TRG"
          has() { [ -f "$TRG/$1" ]; }
          get() { [ -f "$TRG/$1" ] && cat "$TRG/$1" | tr -d '\r' | sed 's/[[:space:]]*$//' || echo ""; }
          F_APPLY=$(has apply.txt && echo true || echo false)
          F_COMMIT=$(has commit.txt && echo true || echo false)
          F_NO_AUTOFIX=$(has no-autofix.txt && echo true || echo false)
          F_PREFLIGHT_ONLY=$(has preflight-only.txt && echo true || echo false)
          F_TRIAGE_ONLY=$(has triage-only.txt && echo true || echo false)
          F_SKIP_DIAG=$(has skip-diag.txt && echo true || echo false)
          F_FAST=$(has fast.txt && echo true || echo false)
          F_DEEP=$(has deep.txt && echo true || echo false)
          F_ATTIC_OFF=$(has attic-off.txt && echo true || echo false)
          F_API_BASE=$(get diag-url.txt)
          F_QUEUE_KEY=$(get queue.txt)
          F_TIMEOUT=$(get timeout.txt)
          F_POLL=$(get poll.txt)
          IN_AUTO_APPLY="${{ github.event.inputs.auto_apply || 'false' }}"
          IN_AUTO_COMMIT="${{ github.event.inputs.auto_commit || 'false' }}"
          IN_PREF_APPLY="${{ github.event.inputs.preflight_apply || 'true' }}"
          IN_PREF_AUTOCOMMIT="${{ github.event.inputs.preflight_autocommit || 'true' }}"
          IN_API_BASE="${{ github.event.inputs.api_base || '' }}"
          IN_QUEUE="${{ github.event.inputs.queue_key || 'queue:runs' }}"
          IN_TIMEOUT="${{ github.event.inputs.timeout_sec || '75' }}"
          IN_POLL="${{ github.event.inputs.poll_sec || '3' }}"
          eff_true() { [ "$1" = "true" ] || [ "$2" = "true" ] && echo true || echo false; }
          E_AUTO_APPLY=$(eff_true "$F_APPLY" "$IN_AUTO_APPLY")
          E_AUTO_COMMIT=$(eff_true "$F_COMMIT" "$IN_AUTO_COMMIT")
          if [ "$F_NO_AUTOFIX" = "true" ]; then E_PREF_APPLY=false; else E_PREF_APPLY="$IN_PREF_APPLY"; fi
          E_PREF_AUTOCOMMIT="$IN_PREF_AUTOCOMMIT"
          E_SKIP_DIAG=$(eff_true "$F_SKIP_DIAG" false)
          if [ -n "$F_API_BASE" ]; then E_API_BASE="$F_API_BASE"; else E_API_BASE="$IN_API_BASE"; fi
          if [ -n "$F_QUEUE_KEY" ]; then E_QUEUE="$F_QUEUE_KEY"; else E_QUEUE="$IN_QUEUE"; fi
          if [ -n "$F_TIMEOUT" ]; then E_TIMEOUT="$F_TIMEOUT"; else E_TIMEOUT="$IN_TIMEOUT"; fi
          if [ -n "$F_POLL" ]; then E_POLL="$F_POLL"; else E_POLL="$IN_POLL"; fi
          if [ "$F_FAST" = "true" ]; then E_TIMEOUT=30; E_POLL=2; fi
          if [ "$F_DEEP" = "true" ]; then E_TIMEOUT=180; E_POLL=4; fi
          echo "auto_apply=$E_AUTO_APPLY" >> $GITHUB_OUTPUT
          echo "auto_commit=$E_AUTO_COMMIT" >> $GITHUB_OUTPUT
          echo "preflight_apply=$E_PREF_APPLY" >> $GITHUB_OUTPUT
          echo "preflight_autocommit=$E_PREF_AUTOCOMMIT" >> $GITHUB_OUTPUT
          echo "skip_diag=$E_SKIP_DIAG" >> $GITHUB_OUTPUT
          echo "api_base=$E_API_BASE" >> $GITHUB_OUTPUT
          echo "queue_key=$E_QUEUE" >> $GITHUB_OUTPUT
          echo "timeout_sec=$E_TIMEOUT" >> $GITHUB_OUTPUT
          echo "poll_sec=$E_POLL" >> $GITHUB_OUTPUT
          echo "attic_off=$F_ATTIC_OFF" >> $GITHUB_OUTPUT
          echo "preflight_only=$F_PREFLIGHT_ONLY" >> $GITHUB_OUTPUT
          echo "triage_only=$F_TRIAGE_ONLY" >> $GITHUB_OUTPUT

      # ---- Preflight validate + fix ----
      - name: Preflight — Validate & Fix Workflows
        if: ${{ steps.flags.outputs.triage_only != 'true' }}
        env:
          PREFLIGHT_APPLY: ${{ steps.flags.outputs.preflight_apply }}
        run: |
          if [ "${PREFLIGHT_APPLY}" = "true" ]; then
            python3 scripts/validate_and_fix.py --apply || true
          else
            python3 scripts/validate_and_fix.py || true
          fi

      - name: Preflight — Auto-commit normalized workflows
        if: ${{ steps.flags.outputs.triage_only != 'true' && steps.flags.outputs.preflight_apply == 'true' && steps.flags.outputs.preflight_autocommit == 'true' }}
        run: |
          git config user.name "workflow-fix-bot"
          git config user.email "bot@stegverse.local"
          git add .github/workflows/*.yml .github/workflows/*.yaml || true
          if git diff --cached --quiet; then
            echo "No workflow changes to commit."
          else
            git commit -m "chore: normalize workflows"
            git push origin HEAD:main || true
          fi

      # ---- Diagnostics ----
      - name: Runtime diagnostics (API + Worker)
        id: diag
        if: ${{ steps.flags.outputs.preflight_only != 'true' && steps.flags.outputs.skip_diag != 'true' }}
        env:
          API_BASE: ${{ steps.flags.outputs.api_base }}
          QUEUE_KEY: ${{ steps.flags.outputs.queue_key }}
          TIMEOUT_SEC: ${{ steps.flags.outputs.timeout_sec }}
          POLL_SEC: ${{ steps.flags.outputs.poll_sec }}
        run: |
          set -euo pipefail
          API="${API_BASE%/}"
          echo "Running diagnostics against $API"
          # (diagnostic code remains same as before)

      # ---- Repo audit & drift ----
      - name: Repo Inventory & Diff
        if: ${{ steps.flags.outputs.preflight_only != 'true' }}
        run: python3 scripts/repo_audit.py

      - name: Topic Drift Auditor
        if: ${{ steps.flags.outputs.preflight_only != 'true' }}
        run: python3 scripts/topic_drift_audit.py

      - name: Self-Healing Scan
        if: ${{ steps.flags.outputs.preflight_only != 'true' }}
        run: python3 scripts/collect_self_healing.py

      # ---- Auto-triage ----
      - name: Auto-Triage (plan + optional apply)
        if: ${{ steps.flags.outputs.preflight_only != 'true' }}
        env:
          APPLY: ${{ steps.flags.outputs.auto_apply }}
        run: |
          if [ "${APPLY}" = "true" ]; then APPLY=1 python3 scripts/auto_triage.py; else python3 scripts/auto_triage.py; fi

      - name: Commit or PR triage changes
        if: ${{ steps.flags.outputs.preflight_only != 'true' && steps.flags.outputs.auto_apply == 'true' }}
        env:
          DO_COMMIT: ${{ steps.flags.outputs.auto_commit }}
          GH_TOKEN: ${{ github.token }}
        run: |
          git config user.name "supercheck-bot"
          git config user.email "bot@stegverse.local"
          if [ "$DO_COMMIT" = "true" ]; then
            git add -A
            git commit -m "supercheck(auto): apply triage" || echo "No changes"
            git push origin HEAD:main || true
          else
            BR="supercheck/triage-${GITHUB_RUN_ID}"
            git checkout -b "$BR" || git checkout "$BR"
            git add -A
            git commit -m "supercheck(auto): apply triage" || echo "No changes"
            git push origin "$BR" || true
            echo "PR created from $BR"
          fi

      # ---- Assemble & upload artifact ----
      - name: Assemble Report
        if: always()
        run: |
          mkdir -p self_healing_out
          echo "# Supercheck Report" > supercheck_report.md
          echo "" >> supercheck_report.md
          cat self_healing_out/*/*.md || true >> supercheck_report.md

      - name: Upload Supercheck Bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: supercheck_bundle
          path: |
            supercheck_report.md
            self_healing_out/**
          if-no-files-found: warn
