version: 1
actions:
  - write_files:
      # 1) Seed TaskOps structure
      - path: ".github/taskops/README-TASKOPS.md"
        mode: "100644"
        contents: |
          # 🗂️ TaskOps (Unified Automation Ledger)
          - **ledger.jsonl**: append-only JSON lines (events, jobs, statuses)
          - **tasks_active.yml**: open tasks
          - **tasks_completed.yml**: closed tasks with outcome
          - **updates_pending.yml**: queued file/patch/readme updates
          - **.state.json**: internal counters/last-run metadata

          ## Append entries
          Workflows can append like:
          ```bash
          echo '{"ts":"2025-01-01T00:00:00Z","event":"example","note":"hello"}' >> .github/taskops/ledger.jsonl
          ```

      - path: ".github/taskops/ledger.jsonl"
        mode: "100644"
        contents: ""

      - path: ".github/taskops/tasks_active.yml"
        mode: "100644"
        contents: |
          version: 1
          tasks: []

      - path: ".github/taskops/tasks_completed.yml"
        mode: "100644"
        contents: |
          version: 1
          tasks: []

      - path: ".github/taskops/updates_pending.yml"
        mode: "100644"
        contents: |
          version: 1
          updates: []

      - path: ".github/taskops/.state.json"
        mode: "100644"
        contents: |
          {
            "last_summary_ts": null,
            "event_counts": {}
          }

      # 2) Minimal summarizer script (used by daily job, optional on-demand)
      - path: "scripts/taskops_update.py"
        mode: "100755"
        contents: |
          #!/usr/bin/env python3
          import json, pathlib, datetime, collections

          ROOT = pathlib.Path(".")
          TDIR = ROOT / ".github" / "taskops"
          LEDGER = TDIR / "ledger.jsonl"
          STATE  = TDIR / ".state.json"
          README = TDIR / "README-TASKOPS.md"

          def now():
            return datetime.datetime.utcnow().replace(microsecond=0).isoformat()+"Z"

          def load_state():
            if STATE.exists():
              return json.loads(STATE.read_text(encoding="utf-8"))
            return {"last_summary_ts": None, "event_counts": {}}

          def save_state(st):
            STATE.write_text(json.dumps(st, indent=2), encoding="utf-8")

          def summarize():
            counts = collections.Counter()
            if LEDGER.exists():
              for line in LEDGER.read_text(encoding="utf-8").splitlines():
                if not line.strip():
                  continue
                try:
                  ev = json.loads(line)
                except:
                  continue
                e = ev.get("event","unknown")
                counts[e] += 1
            return dict(counts)

          def refresh_readme(counts):
            pre = README.read_text(encoding="utf-8") if README.exists() else ""
            lines = pre.splitlines()
            # Append/replace a summary block at the end
            header = "## Summary (auto)"
            summary = [header, "", "| Event | Count |", "|---|---|"]
            for k,v in sorted(counts.items()):
              summary.append(f"| {k} | {v} |")
            out = "\n".join(lines[:]) + ("\n\n" if lines else "") + "\n".join(summary) + "\n"
            README.write_text(out, encoding="utf-8")

          def main():
            st = load_state()
            counts = summarize()
            refresh_readme(counts)
            st["last_summary_ts"] = now()
            st["event_counts"] = counts
            save_state(st)

          if __name__ == "__main__":
            main()

      # 3) Daily summary workflow (also callable manually)
      - path: ".github/workflows/taskops-daily.yml"
        mode: "100644"
        contents: |
          name: taskops-daily
          on:
            workflow_dispatch: {}
            schedule:
              - cron: "17 6 * * *"   # daily @ 06:17 UTC
          permissions:
            contents: write
          jobs:
            summary:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                  with:
                    persist-credentials: true
                    fetch-depth: 0
                - uses: actions/setup-python@v5
                  with:
                    python-version: "3.x"
                - name: Update TaskOps README & state
                  run: |
                    set -euo pipefail
                    python scripts/taskops_update.py
                - name: Commit TaskOps changes (if any)
                  run: |
                    set -euo pipefail
                    git config user.name  "StegVerse Bot"
                    git config user.email "bot@stegverse.org"
                    git add .github/taskops/README-TASKOPS.md .github/taskops/.state.json
                    if git diff --cached --quiet; then
                      echo "No TaskOps changes."
                    else
                      git commit -m "chore(taskops): daily summary update"
                      git push origin HEAD:main

  - commit:
      message: "chore(taskops): bootstrap ledger + daily summary (autopatch)"
