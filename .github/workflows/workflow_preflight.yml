name: Workflow Preflight (Validate & Fix + Breadcrumb)

on:
  workflow_dispatch:
    inputs:
      apply_fixes:
        description: "Apply fixes in-place (otherwise: dry run only)"
        required: false
        default: "true"
      auto_commit:
        description: "Commit/push normalized workflows to main"
        required: false
        default: "true"
  push:
    branches: [ "main" ]
    paths:
      - ".github/trigger/preflight/**"

permissions:
  contents: write
  checks: write

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y jq curl || true
          python3 -V

      - name: Log trigger (breadcrumb trail)
        run: |
          mkdir -p self_healing_out
          echo "{\"ts\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"run_id\":\"${GITHUB_RUN_ID}\",\"attempt\":${GITHUB_RUN_ATTEMPT},\"actor\":\"${GITHUB_ACTOR}\",\"trigger\":\"${{ github.event_name }}:${{ github.ref }}\",\"run_url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" >> self_healing_out/TRIGGER_EVENTS.jsonl

      # Seed minimal fallback (only if your repo doesn't already have the script)
      - name: Seed fallback validator if missing
        run: |
          set -e
          mkdir -p scripts self_healing_out .github/workflows
          if [ ! -f scripts/validate_and_fix.py ]; then
            cat > scripts/validate_and_fix.py <<'PY'
#!/usr/bin/env python3
import os, json, sys
from pathlib import Path
ROOT = Path(__file__).resolve().parents[1]
WF   = ROOT / ".github" / "workflows"
OUT  = ROOT / "self_healing_out"; OUT.mkdir(parents=True, exist_ok=True)
files = sorted([p.as_posix() for p in WF.glob("*.y*ml")]) if WF.exists() else []
summary = {"files": len(files), "changed": 0, "invalid_before": 0, "invalid_after": 0, "applied": "--apply" in sys.argv, "note": "fallback stub ran (real validator not yet committed)"}
(OUT/"WORKFLOW_FIX_REPORT.json").write_text(json.dumps({"summary": summary, "results": [{"path":f, "changed": False, "before_valid": True, "after_valid": True, "text_stats":{}, "yaml_stats":{}} for f in files]}, indent=2), encoding="utf-8")
(OUT/"WORKFLOW_FIX_REPORT.md").write_text("# Workflow Fix Report\n\n- Fallback stub executed (real validator missing)\n- Files found: **{}**\n".format(len(files)), encoding="utf-8")
print(json.dumps(summary, indent=2))
PY
            chmod +x scripts/validate_and_fix.py
          fi

      - name: Validate & (optionally) Auto-Fix Workflows
        env:
          APPLY: ${{ github.event.inputs.apply_fixes }}
        run: |
          set -e
          if [ "$APPLY" = "true" ]; then
            python3 scripts/validate_and_fix.py --apply || true
          else
            python3 scripts/validate_and_fix.py || true
          fi

      - name: Commit Fixed Workflows (if auto_commit=true AND apply_fixes=true)
        if: ${{ github.event.inputs.auto_commit == 'true' && github.event.inputs.apply_fixes == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          git config user.name "workflow-fix-bot"
          git config user.email "bot@stegverse.local"
          git add .github/workflows/*.yml .github/workflows/*.yaml || true
          if git diff --cached --quiet; then
            echo "No workflow changes to commit."
          else
            git commit -m "chore: normalize workflows (auto-fix common YAML issues) [skip ci]"
            git push origin HEAD:main || true
          fi

      - name: Record outcome (last-two)
        if: always()
        run: |
          set -e
          mkdir -p self_healing_out
          echo "STATUS=${{ job.status }}" >> $GITHUB_ENV
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          SHA="$(git rev-parse --short HEAD || echo unknown)"
          RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          LEDGER="self_healing_out/TRIGGER_EVENTS_${{ github.workflow }}.jsonl"
          echo "{\"ts\":\"$TS\",\"status\":\"${{ job.status }}\",\"sha\":\"$SHA\",\"run_url\":\"$RUN_URL\",\"actor\":\"${GITHUB_ACTOR}\"}" >> "$LEDGER"

          # Rebuild "last two" JSON + MD
          LAST_JSON="self_healing_out/LAST_TWO_<NAME>.json"
          LAST_MD="self_healing_out/LAST_TWO_<NAME>.md"
          tail -n 2 "$LEDGER" | jq -s '.' > "$LAST_JSON" || echo "[]" > "$LAST_JSON"

          {
            echo "### Last two <NAME> outcomes"
            jq -r '.[] | "- **\(.status | ascii_upcase)** — \(.ts) — `\(.sha)`  [(run)](\(.run_url)) by \(.actor)"' "$LAST_JSON" 2>/dev/null || true
          } > "$LAST_MD"

      - name: Upload last-two summary (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: last_two_<workflow_preflight>
          path: |
            self_healing_out/LAST_TWO_<workflow_preflight>.json
            self_healing_out/LAST_TWO_<workflow_preflight>.md
          if-no-files-found: warn

      - name: Ensure report dir even on failure
        if: always()
        run: |
          set -e
          mkdir -p self_healing_out
          [ -f self_healing_out/WORKFLOW_FIX_REPORT.md ] || echo "# Workflow Fix Report\n\n(no report generated—validator likely failed early)" > self_healing_out/WORKFLOW_FIX_REPORT.md
          echo "== workflows ==" > self_healing_out/TREE_WORKFLOWS.txt
          ls -la .github/workflows >> self_healing_out/TREE_WORKFLOWS.txt 2>&1 || true

      - name: Upload Fix Report (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: workflow_fix_report
          path: |
            self_healing_out/**
          if-no-files-found: warn
