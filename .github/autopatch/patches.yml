version: 1
patches:
  # === README badges for visibility ===
  - id: readme-badges-supercheck
    path: README.md
    mode: patch
    requires_files: []
    requires_dirs: []
    patch: |
      <!-- BEGIN AUTOPATCH: badges-supercheck -->
      ## Build & Health
      [![Supercheck](https://github.com/StegVerse/StegVerse-SCW/actions/workflows/one_button_supercheck.yml/badge.svg)](https://github.com/StegVerse/StegVerse-SCW/actions/workflows/one_button_supercheck.yml)
      [![AutoPatch (primary)](https://github.com/StegVerse/StegVerse-SCW/actions/workflows/autopatch.yml/badge.svg)](https://github.com/StegVerse/StegVerse-SCW/actions/workflows/autopatch.yml)
      [![AutoPatch (deferred)](https://github.com/StegVerse/StegVerse-SCW/actions/workflows/autopatch_deferred.yml/badge.svg)](https://github.com/StegVerse/StegVerse-SCW/actions/workflows/autopatch_deferred.yml)
      <!-- END AUTOPATCH: badges-supercheck -->

  # === Quick triggers doc (if missing) ===
  - id: quicktriggers-doc
    path: docs/QUICKTRIGGERS.md
    mode: ensure
    ensure: present
    contents: |
      # Quick Triggers
      - Create/commit files under `.github/trigger/supercheck/` to kick off **Supercheck**.
      - Create/commit files under `.github/autopatch/` to kick off **AutoPatch**.
      - Nightly Snapshot runs on schedule; artifacts appear in **Actions → Artifacts**.

  # === Trigger readme (if missing) ===
  - id: trigger-readme
    path: .github/trigger/README.md
    mode: ensure
    ensure: present
    contents: |
      # Trigger Paths
      - `supercheck/` → runs One-Button Supercheck
      - `preflight/`  → runs Preflight validator
      - `rebuild/`    → runs Rebuild Kit

  # === Seed supercheck trigger folder (directory guard) ===
  - id: trigger-supercheck-gitkeep
    path: .github/trigger/supercheck/.gitkeep
    mode: ensure
    ensure: present
    contents: ""

  # === Ensure sweep uploader reusable exists (safe minimal) ===
  - id: reusables-upload-sweep
    path: .github/workflows/_reusables/upload-sweep.yml
    mode: ensure
    ensure: present
    contents: |
      name: Upload Sweep (reusable)
      on: workflow_call
      jobs:
        upload:
          runs-on: ubuntu-latest
          steps:
            - name: Upload sweep bundle
              uses: actions/upload-artifact@v4
              with:
                name: ${{ inputs.name || 'sweep_bundle' }}
                path: |
                  ${{ inputs.base_dir || 'self_healing_out' }}/${{ inputs.files || '' }}
                if-no-files-found: warn

  # === Ensure ensure-tools reusable exists (safe minimal) ===
  - id: reusables-ensure-tools
    path: .github/workflows/_reusables/ensure-tools.yml
    mode: ensure
    ensure: present
    contents: |
      name: Ensure Tools (reusable)
      on:
        workflow_call:
          inputs:
            apt_packages: { required: false, type: string, default: "" }
            python_packages: { required: false, type: string, default: "" }
            python_version: { required: false, type: string, default: "" }
      jobs:
        ensure:
          runs-on: ubuntu-latest
          steps:
            - name: Install apt packages
              run: |
                sudo apt-get update -y
                if [ -n "${{ inputs.apt_packages }}" ]; then
                  sudo apt-get install -y ${{ inputs.apt_packages }}
                fi
            - name: Python toolchain
              run: |
                python3 -V
                python3 -m pip install --upgrade pip
                if [ -n "${{ inputs.python_packages }}" ]; then
                  pip install ${{ inputs.python_packages }}
                fi

  # === Ensure telemetry reusable exists (safe minimal) ===
  - id: reusables-telemetry
    path: .github/workflows/_reusables/telemetry.yml
    mode: ensure
    ensure: present
    contents: |
      name: Telemetry (reusable)
      on:
        workflow_call:
          inputs:
            basename: { required: true, type: string }
            status:   { required: true, type: string }
      jobs:
        t:
          runs-on: ubuntu-latest
          steps:
            - name: Record last-two outcomes
              run: |
                set -e
                mkdir -p self_healing_out
                TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                SHA="$(git rev-parse --short HEAD || echo unknown)"
                RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
                LEDGER="self_healing_out/TRIGGER_EVENTS_${{ inputs.basename }}.jsonl"
                echo "{\"ts\":\"$TS\",\"status\":\"${{ inputs.status }}\",\"sha\":\"$SHA\",\"run_url\":\"$RUN_URL\",\"actor\":\"${GITHUB_ACTOR}\"}" >> "$LEDGER"
                tail -n 2 "$LEDGER" | jq -s '.' > "self_healing_out/LAST_TWO_${{ inputs.basename }}.json" || echo "[]" > "self_healing_out/LAST_TWO_${{ inputs.basename }}.json"

       - id: PATCH-README-BADGES
    label: "README badges -> current repo"
    kind: shell
    description: >
      Normalize README badges and GitHub links to the current repository
      (useful for forks/renames). Safe no-op if patterns not present.
    files:
      - "README.md"
      - "docs/README.md"
      - "README*.md"
    script: ".github/autopatch/snippets/PATCH-README-BADGES.sh"
  # === README: “How to Run” section (idempotent) ===
  - id: readme-how-to-run
    path: README.md
    mode: patch
    patch: |
    
      <!-- BEGIN AUTOPATCH: how-to-run -->
      ## How to Run
      - **Supercheck**: commit any file under `.github/trigger/supercheck/` (e.g., `run-$(date +%s).txt`) or use the “Run workflow” button.
      - **AutoPatch**: edit `.github/autopatch/patches.yml` and commit; AutoPatch runs automatically.
      - **Deferred AutoPatch**: items that are blocked will be moved to `patches_deferred.yml` and retried later.
      <!-- END AUTOPATCH: how-to-run -->


  - id: PATCH-ISSUE-TEMPLATE-LINKS
    label: "Issue template links -> current repo"
    kind: shell
    description: >
      Normalize links inside .github/ISSUE_TEMPLATE/*.md to point at the current repository
      (issues, pulls, discussions, actions, bare repo links). Safe no-op if nothing matches.
    files:
      - ".github/ISSUE_TEMPLATE/*.md"
      - ".github/ISSUE_TEMPLATE/**.md"
    script: ".github/autopatch/snippets/PATCH-ISSUE-TEMPLATE-LINKS.sh"

  - id: PATCH-README-FOOTER
    label: "README maintained-by footer"
    kind: shell
    description: >
      Ensure a small maintained-by footer exists (with timestamp). If present, refresh timestamp only.
    files:
      - "README.md"
      - "docs/README.md"
      - "README*.md"
    script: ".github/autopatch/snippets/PATCH-README-FOOTER.sh"

  - id: PATCH-README-TITLE
    label: "README H1 = repository title"
    kind: shell
    description: >
      Ensure the first H1 in README equals the repo title (or README_TITLE override),
      and add a small autopatch marker. Respects YAML front matter if present.
    files:
      - "README.md"
      - "docs/README.md"
      - "README*.md"
    script: ".github/autopatch/snippets/PATCH-README-TITLE.sh"

- name: AutoPatch (primary)
  env:
    README_TITLE_PRETTY: "1"    # kebab/snake -> Title Case
    # README_TITLE: "StegVerse SCW"  # uncomment to force a specific title
  run: |
    python3 .github/autopatch/runner.py --apply

  - id: PATCH-README-TITLE-DRYRUN
    label: "README H1 (dry-run on PRs)"
    kind: shell
    files: ["README.md","docs/README.md","README*.md"]
    script: ".github/autopatch/snippets/PATCH-README-TITLE-DRYRUN.sh"


