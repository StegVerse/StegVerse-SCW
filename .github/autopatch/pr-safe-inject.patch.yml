version: 1
actions:
  - write_files:
      - path: "scripts/insert_pr_safe_step.py"
        mode: "100755"
        contents: |
          #!/usr/bin/env python3
          """
          AutoPatch: insert_pr_safe_dispatch step across workflows

          - Adds "uses: ./.github/actions/pr-safe-dispatch"
          - Only inserts if workflow already sets up Python (actions/setup-python)
          - Idempotent and safe for repeated runs
          - Logs summary to stdout for TaskOps ledger
          """
          import sys, os, pathlib
          from copy import deepcopy

          try:
              import yaml
          except Exception:
              print("::error title=Missing PyYAML::Install PyYAML before running this patch.")
              sys.exit(1)

          ROOT = pathlib.Path(".")
          WF_DIR = ROOT / ".github" / "workflows"
          TARGET_USES = "./.github/actions/pr-safe-dispatch"

          def find_steps(doc):
              """Yield tuples (job_name, steps_list_ref) for each job that has steps."""
              jobs = (doc or {}).get("jobs") or {}
              for jname, j in jobs.items():
                  steps = (j or {}).get("steps")
                  if isinstance(steps, list):
                      yield jname, steps

          def has_target_step(steps):
              for s in steps:
                  if isinstance(s, dict) and str(s.get("uses","")).strip() == TARGET_USES:
                      return True
              return False

          def workflow_uses_python(steps):
              for s in steps:
                  if not isinstance(s, dict): continue
                  uses = str(s.get("uses","")).lower()
                  if "actions/setup-python@" in uses:
                      return True
              return False

          def find_insert_index(steps):
              """Prefer after setup-python, else after checkout, else end."""
              setup_idx = checkout_idx = None
              for i, s in enumerate(steps):
                  if not isinstance(s, dict): continue
                  uses = str(s.get("uses","")).lower()
                  if "actions/setup-python@" in uses:
                      setup_idx = i
                  if "actions/checkout@" in uses:
                      checkout_idx = i
              if setup_idx is not None:
                  return setup_idx + 1
              if checkout_idx is not None:
                  return checkout_idx + 1
              return len(steps)

          def inject_step(steps):
              step = {
                  "name": "PR-safe dispatcher (auto-detect)",
                  "uses": TARGET_USES,
              }
              idx = find_insert_index(steps)
              steps.insert(idx, step)

          def process_file(path: pathlib.Path):
              try:
                  raw = path.read_text(encoding="utf-8")
                  doc = yaml.safe_load(raw)
              except Exception as e:
                  print(f"::warning title=YAML load failed::{path}: {e}")
                  return False

              changed = False
              for jname, steps in find_steps(doc):
                  if workflow_uses_python(steps) and not has_target_step(steps):
                      inject_step(steps)
                      changed = True
                      print(f"‚úî Injected ‚Üí {path} (job: {jname})")
                  else:
                      print(f"‚è≠ Skipped ‚Üí {path} (no Python setup or already present)")

              if changed:
                  with path.open("w", encoding="utf-8") as w:
                      yaml.safe_dump(doc, w, sort_keys=False)
              return changed

          def main():
              if not WF_DIR.exists():
                  print("::warning title=No workflows::.github/workflows not found; skipping")
                  return
              any_changed = False
              for p in sorted(WF_DIR.glob("*.y*ml")):
                  any_changed = process_file(p) or any_changed
              if any_changed:
                  print("‚úÖ Injection complete.")
              else:
                  print("‚ÑπÔ∏è No new insertions needed.")

          if __name__ == "__main__":
              main()

  - run_shell:
      name: Inject PR-safe dispatcher into workflows
      script: |
        set -euo pipefail
        echo "üîß Installing PyYAML for injector..."
        python -m pip install --disable-pip-version-check --quiet pyyaml
        echo "üöÄ Running injector..."
        python scripts/insert_pr_safe_step.py

  - commit:
      message: "chore(ci): auto-insert pr-safe-dispatch step across Python workflows (guarded)"
