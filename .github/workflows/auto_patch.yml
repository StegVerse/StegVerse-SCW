name: AutoPatch (Repo Workflow Hardener)

on:
  workflow_dispatch:
    inputs:
      apply:
        description: "Apply changes (else dry run)"
        required: false
        default: "false"
      auto_commit:
        description: "Commit fixes directly to main (else open PR)"
        required: false
        default: "false"
      rid:
        description: "Correlation ID override (RID-yyyymmdd-###)"
        required: false
        default: ""
      task:
        description: "Task/Issue ID (e.g., STEG-123)"
        required: false
        default: ""

  push:
    branches: [ "main" ]
    paths:
      - ".github/trigger/autopatch/**"

permissions:
  contents: write
  pull-requests: write
  checks: write

concurrency:
  group: autopatch-${{ github.ref }}
  cancel-in-progress: true

jobs:
  autopatch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Ensure tools
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y jq
          python3 -V

      - name: Read run intent (RID/TASK)
        shell: bash
        run: |
          set -e
          INTENT_FILE="$(ls .github/trigger/**/run.* 2>/dev/null | head -n1 || true)"
          RID_IN="${{ github.event.inputs.rid }}"
          TASK_IN="${{ github.event.inputs.task }}"
          if [ -z "$RID_IN" ] && [ -n "$INTENT_FILE" ]; then
            RID_IN="$(grep -E '^(rid|RID):\\s*' "$INTENT_FILE" | head -n1 | sed 's/^[^:]*:\\s*//')"
          fi
          if [ -z "$TASK_IN" ] && [ -n "$INTENT_FILE" ]; then
            TASK_IN="$(grep -E '^(task|TASK):\\s*' "$INTENT_FILE" | head -n1 | sed 's/^[^:]*:\\s*//')"
          fi
          echo "RID=${RID_IN:-RID-auto-${GITHUB_RUN_ID}}" >> $GITHUB_ENV
          echo "TASK=${TASK_IN:-STEG-unknown}" >> $GITHUB_ENV
          echo "APPLY=${{ github.event.inputs.apply }}" >> $GITHUB_ENV
          echo "AUTO_COMMIT=${{ github.event.inputs.auto_commit }}" >> $GITHUB_ENV

      - name: Run AutoPatch
        shell: bash
        run: |
          set -e
          mkdir -p patches scripts self_healing_out
          if [ ! -f scripts/auto_patch.py ]; then
            echo "ERROR: scripts/auto_patch.py missing"; exit 1
          fi
          python3 scripts/auto_patch.py

      - name: Create commit or PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          if [ "${APPLY}" != "true" ]; then
            echo "Dry run: skipping commit/PR"
            exit 0
          fi

          git config user.name "autopatch-bot"
          git config user.email "bot@stegverse.local"
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          MSG="autopatch: normalize workflows (RID=${RID}, ${TASK})"
          if [ "${AUTO_COMMIT}" = "true" ]; then
            git add -A
            git commit -m "$MSG"
            git push origin HEAD:main || true
          else
            BR="autopatch/${RID}"
            git checkout -b "$BR"
            git add -A
            git commit -m "$MSG"
            git push origin "$BR" || true
            # open PR
            BODY="AutoPatch applied repo standardization.\n\nRID=${RID}\nTASK=${TASK}\nSee artifact 'autopatch_bundle'."
            curl -sS -X POST \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              -d "$(jq -nc --arg t "AutoPatch: ${RID} (${TASK})" --arg b "$BODY" --arg head "$BR" '{"title":$t,"body":$b,"head":$head,"base":"main","maintainer_can_modify":true,"labels":["autopatch", "hardening"]}')" \
              "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls" >/dev/null || true
          fi

      - name: Assemble AutoPatch Report (human)
        run: |
          set -e
          {
            echo "# AutoPatch Summary"
            echo "- RID: ${RID}"
            echo "- TASK: ${TASK}"
            echo ""
            echo "## Report"
            [ -f self_healing_out/AUTOPATCH_REPORT.md ] && cat self_healing_out/AUTOPATCH_REPORT.md || echo "(no report)"
          } > autopatch_summary.md

      - name: Update last-two ledger
        if: always()
        run: |
          set -e
          mkdir -p self_healing_out
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          LEDGER="self_healing_out/TRIGGER_EVENTS_AutoPatch.jsonl"
          echo "{\"ts\":\"$TS\",\"status\":\"${{ job.status }}\",\"rid\":\"${RID}\",\"task\":\"${TASK}\",\"run_url\":\"$RUN_URL\"}" >> "$LEDGER"
          tail -n 2 "$LEDGER" | jq -s '.' > self_healing_out/LAST_TWO_AutoPatch.json || echo "[]" > self_healing_out/LAST_TWO_AutoPatch.json
          {
            echo "### Last two AutoPatch outcomes"
            jq -r '.[] | "- **\(.status | ascii_upcase)** — \(.ts) — \(.rid) — \(.task)  [(run)](\(.run_url))"' self_healing_out/LAST_TWO_AutoPatch.json 2>/dev/null || true
          } > self_healing_out/LAST_TWO_AutoPatch.md

      - name: Upload AutoPatch bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autopatch_bundle
          path: |
            autopatch_summary.md
            self_healing_out/AUTOPATCH_REPORT.json
            self_healing_out/AUTOPATCH_REPORT.md
            self_healing_out/LAST_TWO_AutoPatch.json
            self_healing_out/LAST_TWO_AutoPatch.md
          if-no-files-found: warn
