name: autopatch-apply

on:
  workflow_dispatch: {}       # ðŸ‘ˆ adds manual run support
  push:
    branches: [ "main" ]
    paths:
      - ".github/autopatch/**"
      - "scripts/autopatch_runner.py"
      - ".github/trigger/autopatch/**"
      
permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      MANIFEST: .github/autopatch/patches.yml
      DEFER: .github/autopatch/patches_deferred.yml
      OUTDIR: self_healing_out

    steps:
      - name: Checkout
      # Needs full history if your runner inspects previous commits; shallow is fine otherwise
        uses: actions/checkout@v4

      - name: Setup common Python
        id: py
        uses: ./.github/actions/setup-common-python
        with:
          python-version: "3.11"
          cache: "true"
          extra-packages: ""   # add space-separated pip pkgs if you want

      - name: Ensure system tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Seed manifests if missing
        run: |
          set -euo pipefail
          mkdir -p .github/autopatch "${OUTDIR}"
          if [ ! -f "${MANIFEST}" ]; then
            cat > "${MANIFEST}" <<'YML'
version: 1
patches: []
YML
            echo "Seeded ${MANIFEST}"
          fi
          if [ ! -f "${DEFER}" ]; then
            cat > "${DEFER}" <<'YML'
version: 1
patches: []
YML
            echo "Seeded ${DEFER}"
          fi

      - name: Dry-run AutoPatch (preview)
        id: dryrun
        run: |
          set -euo pipefail
          python scripts/autopatch_runner.py \
            --manifest "${MANIFEST}" \
            --dry-run || true
          # capture any report files into summary if present
          if [ -f "${OUTDIR}/AUTOPATCH_REPORT.md" ]; then
            echo "### AutoPatch Dry-Run Report" >> "$GITHUB_STEP_SUMMARY"
            cat "${OUTDIR}/AUTOPATCH_REPORT.md" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Apply AutoPatch (prune + defer)
        id: apply
        continue-on-error: true
        run: |
          set -euo pipefail
          python scripts/autopatch_runner.py \
            --manifest "${MANIFEST}" \
            --prune-success \
            --defer-file "${DEFER}"
          echo "exit_code=0" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Capture apply exit (if failed)
        if: failure()   # only runs if prior step failed
        run: |
          echo "Apply returned non-zero; marking in outputs."
          echo "exit_code=1" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Commit manifest updates (if any)
        run: |
          set -euo pipefail
          git config user.name  "StegVerse Bot"
          git config user.email "bot@stegverse.org"
          git add "${MANIFEST}" "${DEFER}" || true
          if ! git diff --cached --quiet; then
            git commit -m "autopatch: prune successes, defer blocked items"
            git push origin HEAD:main
          else
            echo "No manifest changes to commit."
          fi

      - name: Upload AutoPatch artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autopatch-report-${{ github.run_id }}
          path: |
            self_healing_out/AUTOPATCH_REPORT.json
            self_healing_out/AUTOPATCH_REPORT.md
          if-no-files-found: warn

      - name: TaskOps ledger (best-effort append)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p .github/taskops
          ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          applied="unknown"
          if [ -f "${OUTDIR}/AUTOPATCH_REPORT.json" ]; then
            applied=$(jq -r '.summary.applied // "0"' "${OUTDIR}/AUTOPATCH_REPORT.json" 2>/dev/null || echo "0")
          fi
          cat > /tmp/taskops_entry.json <<JSON
{"ts":"${ts}","job":"autopatch-apply","run_id":"${GITHUB_RUN_ID}","repo":"${GITHUB_REPOSITORY}","branch":"${GITHUB_REF_NAME}","applied":"${applied}"}
JSON
          # append to ledger if present; create if you want to start tracking now
          if [ -f ".github/taskops/ledger.jsonl" ]; then
            cat /tmp/taskops_entry.json >> .github/taskops/ledger.jsonl
            git add .github/taskops/ledger.jsonl
            if ! git diff --cached --quiet; then
              git commit -m "chore(taskops): log autopatch-apply run $GITHUB_RUN_ID"
              git push origin HEAD:main
            fi
          else
            echo "TaskOps ledger not found (skipping append). To enable, create .github/taskops/ledger.jsonl"
          fi

      - name: Summarize
        if: always()
        run: |
          echo "### AutoPatch Apply Summary" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "${OUTDIR}/AUTOPATCH_REPORT.md" ]; then
            cat "${OUTDIR}/AUTOPATCH_REPORT.md" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No AUTOPATCH_REPORT.md generated._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Set job outcome
        if: always()
        run: |
          # Prefer the apply step's explicit output if present; otherwise succeed.
          CODE="${{ steps.apply.outputs.exit_code }}"
          if [ "$CODE" = "1" ]; then
            echo "AutoPatch apply reported errors â€” failing job."
            exit 1
          fi
          echo "AutoPatch apply completed."
