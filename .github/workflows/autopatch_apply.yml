name: autopatch-apply

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - ".github/autopatch/**"

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Reusable composite setup — installs Python and YAML libraries
      - uses: ./.github/actions/setup-common-python

      - name: Apply patches from manifest
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, subprocess, pathlib
          try:
              import yaml
          except Exception:
              try:
                  from ruamel import yaml as ryaml
                  yaml = ryaml
              except Exception as e:
                  print(f"::error title=YAML missing::{e}")
                  sys.exit(1)

          root = pathlib.Path(".").resolve()
          manifest = root / ".github" / "autopatch" / "patches.yml"

          if not manifest.exists():
              print(f"::warning title=Manifest missing::{manifest} not found")
              sys.exit(0)

          with open(manifest, "r", encoding="utf-8") as f:
              data = yaml.safe_load(f) or {}
          patches = data.get("patches") if isinstance(data, dict) else data

          if not patches:
              print("::warning::No patches defined.")
              sys.exit(0)

          def ensure_parent(p):
              p.parent.mkdir(parents=True, exist_ok=True)

          for patch in patches:
              pid = patch.get("id", "(unnamed)")
              path = patch.get("path")
              if not path:
                  print(f"::warning::Skipping {pid}, missing path.")
                  continue
              pf = root / path
              if not pf.exists():
                  print(f"::warning::Patch file {path} not found.")
                  continue

              print(f"🩹 Applying patch {pid}")
              with open(pf, "r", encoding="utf-8") as f:
                  doc = yaml.safe_load(f) or {}
              for action in doc.get("actions", []):
                  if "write_files" in action:
                      for spec in action["write_files"]:
                          dest = root / spec["path"]
                          ensure_parent(dest)
                          dest.write_text(spec["contents"], encoding="utf-8")
                          if "mode" in spec:
                              os.chmod(dest, int(spec["mode"], 8))
                          print(f"   ✍️  wrote {dest}")
                  elif "commit" in action:
                      msg = (
                          action["commit"]
                          if isinstance(action["commit"], str)
                          else action["commit"].get("message", "chore(autopatch): update")
                      )
                      subprocess.run(["git", "add", "-A"], check=False)
                      subprocess.run(["git", "commit", "-m", msg], check=False)
                      print(f"   🧾 committed: {msg}")
          print("✅ All patches processed successfully.")
          PY

      - name: Push changes
        shell: bash
        run: |
          if ! git diff --quiet; then
            git add -A
          fi
          if ! git diff --cached --quiet; then
            git -c user.name="StegVerse Bot" \
                -c user.email="bot@stegverse.org" \
                commit -m "chore(autopatch): apply patches"
            git push
            echo "✅ Changes pushed."
          else
            echo "ℹ️ No changes detected."
          fi
