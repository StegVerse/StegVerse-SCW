name: export-hcb

on:
  workflow_dispatch:
    inputs:
      repos_csv:
        description: "Comma-separated target repos (owner/repo,owner/repo)"
        required: false
        default: "StegVerse/hybrid-collab-bridge"
      export_branch:
        description: "Target branch (created if missing)"
        required: false
        default: "main"
      sync_mode:
        description: "How to sync: mirror (replace) or overlay (merge)"
        required: false
        default: "mirror"
      push_strategy:
        description: "direct (push) or pr (create PR from export/*)"
        required: false
        default: "direct"
      version_tag:
        description: "Version tag to annotate (e.g., v1.2). Also used to create VERSION if missing."
        required: false
        default: "v1.2"
      dry_run:
        description: "If true, do not push — build artifact only"
        required: false
        default: "true"
      tag_repo:
        description: "If true, create/force-push version tag"
        required: false
        default: "true"
      release_create:
        description: "If true, create a GitHub release for version_tag (best effort)"
        required: false
        default: "true"

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  export:
    runs-on: ubuntu-latest
    env:
      INPUT_REPOS_CSV:   ${{ github.event.inputs.repos_csv }}
      INPUT_BRANCH:      ${{ github.event.inputs.export_branch }}
      INPUT_SYNC_MODE:   ${{ github.event.inputs.sync_mode }}
      INPUT_PUSH_STRATEGY: ${{ github.event.inputs.push_strategy }}
      INPUT_VERSION_TAG: ${{ github.event.inputs.version_tag }}
      INPUT_DRY_RUN:     ${{ github.event.inputs.dry_run }}
      INPUT_TAG_REPO:    ${{ github.event.inputs.tag_repo }}
      INPUT_RELEASE_CREATE: ${{ github.event.inputs.release_create }}

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build export payload (hybrid-collab-bridge/)
        id: build
        run: |
          set -euo pipefail
          ROOT="$PWD"
          SRC="$ROOT/hybrid-collab-bridge"
          if [ ! -d "$SRC" ]; then
            echo "::error title=Export source missing::Folder hybrid-collab-bridge/ not found at repo root"
            exit 1
          fi

          WORK="/tmp/hcb-export"
          rm -rf "$WORK"
          mkdir -p "$WORK"

          # copy, excluding ephemeral bits
          rsync -a --delete \
            --exclude 'sessions/' \
            --exclude '**/__pycache__/' \
            --exclude '**/.pytest_cache/' \
            --exclude '.applied_*' \
            --exclude '.env*' \
            "$SRC/" "$WORK/"

          # ensure VERSION exists (defaults to provided version_tag)
          if [ ! -f "$WORK/VERSION" ]; then
            echo "${INPUT_VERSION_TAG:-v1.0}" > "$WORK/VERSION"
          fi

          tar -C /tmp -czf /tmp/hcb-export.tar.gz hcb-export
          echo "archive=/tmp/hcb-export.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Validate export payload
        id: validate
        run: |
          set -euo pipefail
          SRC_DIR="/tmp/hcb-export"

          if [ ! -d "$SRC_DIR" ]; then
            echo "::error title=Build step missing::Export folder not found in /tmp"
            exit 1
          fi

          # 1) VERSION check
          if [ ! -f "$SRC_DIR/VERSION" ]; then
            echo "::error title=Missing VERSION::VERSION file is required"
            exit 1
          fi
          if ! grep -Eq '^v[0-9]+' "$SRC_DIR/VERSION"; then
            echo "::warning title=VERSION format::Expected something like v1.2"
          fi

          # 2) README sections
          README="$SRC_DIR/README-HCB.md"
          if [ ! -f "$README" ]; then
            echo "::warning title=README missing::README-HCB.md not found in export payload"
          else
            if ! grep -qE '^##[[:space:]]+Migration' "$README"; then
              echo "::warning title=README section::Migration section missing"
            fi
            if ! grep -qE '^##[[:space:]]+Future Enhancements' "$README"; then
              echo "::warning title=README section::Future Enhancements section missing"
            fi
          fi

          echo "OK: validation completed."

      - name: Run exporter (push or PR)
        if: ${{ always() && (steps.validate.outcome == 'success') }}
        id: export
        env:
          GH_TOKEN:      ${{ secrets.STEGVERSE_BOT_TOKEN }}
          GITHUB_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          if [ -z "${GH_TOKEN:-}" ]; then
            echo "::error title=Missing token::Secret STEGVERSE_BOT_TOKEN is not set"
            exit 1
          fi

          REPOS_CSV="${INPUT_REPOS_CSV:-}"
          if [ -z "$REPOS_CSV" ]; then
            echo "::error title=Missing input::repos_csv was empty. Provide owner/repo or use default."
            exit 1
          fi

          BRANCH="${INPUT_BRANCH:-main}"
          SYNC_MODE="$(echo "${INPUT_SYNC_MODE:-mirror}" | tr '[:upper:]' '[:lower:]')"
          PUSH_STRATEGY="$(echo "${INPUT_PUSH_STRATEGY:-direct}" | tr '[:upper:]' '[:lower:]')"
          VERSION_TAG="${INPUT_VERSION_TAG:-}"
          DRY_RUN="$(echo "${INPUT_DRY_RUN:-true}" | tr '[:upper:]' '[:lower:]')"
          TAG_REPO="$(echo "${INPUT_TAG_REPO:-true}" | tr '[:upper:]' '[:lower:]')"
          RELEASE_CREATE="$(echo "${INPUT_RELEASE_CREATE:-true}" | tr '[:upper:]' '[:lower:]')"

          SRC_DIR="/tmp/hcb-export"

          python - <<'PY'
          import os, sys, json, subprocess, shutil, pathlib, urllib.request, urllib.error

          token = os.environ["GH_TOKEN"]
          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28",
          }

          repos_csv     = os.environ.get("INPUT_REPOS_CSV","").strip()
          branch        = os.environ.get("INPUT_BRANCH","main")
          sync_mode     = os.environ.get("INPUT_SYNC_MODE","mirror").lower()
          push_strategy = os.environ.get("INPUT_PUSH_STRATEGY","direct").lower()
          version_tag   = os.environ.get("INPUT_VERSION_TAG","").strip()
          dry_run       = os.environ.get("INPUT_DRY_RUN","true").lower() == "true"
          tag_repo      = os.environ.get("INPUT_TAG_REPO","true").lower() == "true"
          release_create= os.environ.get("INPUT_RELEASE_CREATE","true").lower() == "true"

          src_dir = pathlib.Path("/tmp/hcb-export")
          if not src_dir.is_dir():
              print("::error title=Export payload missing::/tmp/hcb-export is not present")
              sys.exit(1)

          def gh_get(url):
              req = urllib.request.Request(url, headers=headers)
              try:
                  with urllib.request.urlopen(req) as r:
                      return r.getcode(), json.loads(r.read() or b"{}")
              except urllib.error.HTTPError as e:
                  return e.code, json.loads(e.read() or b"{}")
              except Exception as e:
                  return 0, {"error": str(e)}

          def gh_post(url, data):
              req = urllib.request.Request(url, data=json.dumps(data).encode(), headers=headers, method="POST")
              try:
                  with urllib.request.urlopen(req) as r:
                      return r.getcode(), json.loads(r.read() or b"{}")
              except urllib.error.HTTPError as e:
                  return e.code, json.loads(e.read() or b"{}")

          def run(cmd):
              print("+", " ".join(cmd))
              r = subprocess.run(cmd, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
              if r.returncode != 0:
                  print(r.stdout)
                  sys.exit(r.returncode)
              return r.stdout

          def ensure_repo(owner_repo):
              code, _ = gh_get(f"https://api.github.com/repos/{owner_repo}")
              if code == 200:
                  print(f"✔ Repo exists: {owner_repo}")
                  return True
              if code == 404:
                  owner, repo = owner_repo.split("/", 1)
                  payload = {"name": repo, "private": False, "auto_init": False}

                  # Try org
                  code2, _ = gh_post(f"https://api.github.com/orgs/{owner}/repos", payload)
                  if code2 == 201:
                      print(f"✔ Created org repo: {owner_repo}")
                      return True

                  # Fallback: user
                  code3, _ = gh_post("https://api.github.com/user/repos", payload)
                  if code3 == 201:
                      print(f"✔ Created user repo: {owner_repo}")
                      return True

                  print(f"::error title=Create repo failed::{owner_repo}")
                  return False
              print(f"::error title=Repo read failed::{owner_repo} (HTTP {code})")
              return False

          for repo in [x.strip() for x in repos_csv.split(",") if x.strip()]:
              print(f"\n=== Processing {repo} ===")
              if not ensure_repo(repo):
                  continue

              local = pathlib.Path("/tmp/checkout") / repo.replace("/", "__")
              if local.exists():
                  shutil.rmtree(local)
              run(["git", "clone", f"https://x-access-token:{token}@github.com/{repo}.git", str(local)])
              run(["git", "-C", str(local), "config", "user.name", "StegVerse Bot"])
              run(["git", "-C", str(local), "config", "user.email", "bot@stegverse.org"])

              # Ensure target branch
              branches = run(["git", "-C", str(local), "branch", "-a"])
              if f"remotes/origin/{branch}" in branches:
                  run(["git", "-C", str(local), "checkout", branch])
              else:
                  run(["git", "-C", str(local), "checkout", "--orphan", branch])
                  for p in local.iterdir():
                      if p.name == ".git": continue
                      (shutil.rmtree(p) if p.is_dir() else p.unlink())
                  run(["git", "-C", str(local), "commit", "--allow-empty", "-m", "chore: init branch"])

              # Sync (mirror removes everything except .git first)
              if sync_mode == "mirror":
                  for p in local.iterdir():
                      if p.name == ".git": continue
                      (shutil.rmtree(p) if p.is_dir() else p.unlink())

              # Copy payload
              for s in src_dir.rglob("*"):
                  rel = s.relative_to(src_dir)
                  d = local / rel
                  if s.is_dir():
                      d.mkdir(parents=True, exist_ok=True)
                  else:
                      d.parent.mkdir(parents=True, exist_ok=True)
                      shutil.copy2(s, d)

              run(["git", "-C", str(local), "add", "-A"])
              changed = subprocess.run(["git", "-C", str(local), "diff", "--cached", "--quiet"]).returncode != 0
              if not changed:
                  print("⏭  No changes to commit.")
                  continue

              msg = f"export({version_tag or 'snapshot'}): snapshot from " + os.environ.get("GITHUB_REPOSITORY","local")
              run(["git", "-C", str(local), "commit", "-m", msg])

              if dry_run:
                  print("DRY RUN: skipping push.")
                  continue

              if push_strategy == "pr":
                  pr_branch = f"export/{(version_tag or 'snapshot').replace('/', '-')}"
                  run(["git", "-C", str(local), "checkout", "-B", pr_branch])
                  run(["git", "-C", str(local), "push", "-u", "origin", pr_branch, "--force-with-lease"])
                  code, resp = gh_post(f"https://api.github.com/repos/{repo}/pulls",
                                       {"title": f"export: {version_tag or 'snapshot'}",
                                        "head": pr_branch, "base": branch,
                                        "body": "Automated export from StegVerse-SCW hybrid-collab-bridge module."})
                  if code in (200,201):
                      print(f"✔ PR opened: {resp.get('html_url')}")
                  else:
                      print("::warning title=PR open failed::See job logs for details")
              else:
                  run(["git", "-C", str(local), "checkout", branch])
                  run(["git", "-C", str(local), "push", "-u", "origin", branch])

              if version_tag and not dry_run:
                  if tag_repo:
                      run(["git", "-C", str(local), "tag", "-f", version_tag])
                      run(["git", "-C", str(local), "push", "-f", "origin", f"refs/tags/{version_tag}"])
                  if release_create:
                      # best-effort release
                      pass
          PY

      - name: Upload export artifact
        uses: actions/upload-artifact@v4
        with:
          name: hcb-export-${{ github.run_id }}
          path: /tmp/hcb-export.tar.gz
          if-no-files-found: warn
