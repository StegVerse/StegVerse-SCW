name: Workflows Console Table (v2)

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/**"
      - "README.md"

permissions:
  contents: write
  actions: write   # needed to dispatch a workflow

concurrency:
  group: ops-console-table
  cancel-in-progress: false

jobs:
  build-table:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: python -m pip install --upgrade pip pyyaml

      - name: Build tables & update README
        run: |
          python - <<'PY'
          import pathlib, yaml, urllib.parse as U, datetime, re

          ROOT   = pathlib.Path(".")
          WF_DIR = ROOT/".github/workflows"
          OPS_RT = ROOT/"OPS/CONSOLE.md"
          OPS_MD = ROOT/".github/docs/OPS_CONSOLE.md"
          OPS_RT.parent.mkdir(parents=True, exist_ok=True)
          OPS_MD.parent.mkdir(parents=True, exist_ok=True)
          README = ROOT/"README.md"

          def load(p):
            try:
              return yaml.safe_load(p.read_text(encoding="utf-8"))
            except Exception as e:
              return e

          def has_dispatch(d):
            if not isinstance(d, dict): return False
            on = d.get("on")
            if on is None: return False
            if isinstance(on, str):   return on == "workflow_dispatch"
            if isinstance(on, list):  return "workflow_dispatch" in on
            if isinstance(on, dict):
              if set(on.keys()) == {"workflow_call"}: return False
              return "workflow_dispatch" in on
            return False

          rows, ok, nod, bad = [], 0, 0, 0
          for p in sorted(WF_DIR.glob("*.y*ml")):
            data = load(p)
            state, note = "❌ broken", ""
            if isinstance(data, Exception):
              bad += 1; note = type(data).__name__
            else:
              if has_dispatch(data): ok += 1; state = "✅ ok"
              else: nod += 1; state = "➖ no-dispatch"

            fname = p.name
            enc   = U.quote(fname, safe="")
            view  = f"./actions/workflows/{enc}"
            filev = f"./blob/main/.github/workflows/{enc}"
            issue_q = U.urlencode({
              "title": f"Run {fname}",
              "labels": "run:workflow",
              "body": f"workflow: {fname}\nref: main\ninputs_json: {{}}\n"
            })
            run   = f"./issues/new?{issue_q}"
            rows.append((fname, state, view, filev, run, note))

          def render(rows):
            hdr = "| State | Workflow | Actions |\n|:--:|:--|:--|\n"
            body = []
            for (fname, st, view, filev, run, note) in rows:
              fn = f"`{fname}`"
              actions = f"[View]({view}) · [File]({filev}) · [▶ Run]({run})"
              if note: actions += f" · <sub>{note}</sub>"
              body.append(f"| {st} | {fn} | {actions} |")
            return hdr + "\n".join(body) + "\n"

          table = render(rows)
          now   = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
          header = f"# Ops Console\n\n_Last updated: **{now}**_\n\n"

          OPS_RT.write_text(header + table, encoding="utf-8")
          OPS_MD.write_text(header + table, encoding="utf-8")

          badge = "[![workflows](.github/badges/workflows.svg)](.github/docs/WORKFLOWS_STATUS.md)"
          block_start = "<!-- ops:console -->"
          block_end   = "<!-- /ops:console -->"
          block = f"{block_start}\n\n{badge}\n\n[Open full console](OPS/CONSOLE.md)\n\n{table}\n{block_end}\n"

          txt = README.read_text(encoding="utf-8") if README.exists() else "# Repository\n\n"
          if block_start in txt and block_end in txt:
            txt = re.sub(rf"{re.escape(block_start)}.*?{re.escape(block_end)}", block, txt, flags=re.S)
          else:
            txt += "\n## Ops Console\n\n" + block
          README.write_text(txt, encoding="utf-8")
          PY

            - name: Commit (if changed)
        run: |
          set -e
          git config user.name  "StegVerse Bot"
          git config user.email "bot@stegverse.org"
          git add OPS/CONSOLE.md .github/docs/OPS_CONSOLE.md README.md || true
          if ! git diff --cached --quiet; then
            git commit -m "docs(ops): update Ops Console tables and README block"
            git push origin HEAD:main
          else
            echo "No changes."
          fi
