version: 1
actions:
  - write_files:
      # New badge generator for AutoPatch success / issues
      - path: "scripts/taskops_badge_autopatch.py"
        mode: "100755"
        contents: |
          #!/usr/bin/env python3
          import json, pathlib, math

          ROOT = pathlib.Path(".")
          LEDGER = ROOT / ".github" / "taskops" / "ledger.jsonl"
          BDIR   = ROOT / ".github" / "taskops" / "badges"
          BDIR.mkdir(parents=True, exist_ok=True)

          total_runs = 0
          success_runs = 0
          total_errors = 0
          total_blocked = 0

          if LEDGER.exists():
            for line in LEDGER.read_text(encoding="utf-8").splitlines():
              if not line.strip(): continue
              try:
                ev = json.loads(line)
              except Exception:
                continue
              if ev.get("event") == "autopatch_summary":
                total_runs += 1
                err = int(ev.get("error", 0) or 0)
                blk = int(ev.get("blocked", 0) or 0)
                total_errors += err
                total_blocked += blk
                if err == 0 and blk == 0:
                  success_runs += 1

          # success rate badge (X% or X/Y)
          rate = 0.0
          if total_runs > 0:
            rate = round(100.0 * success_runs / total_runs)
          success_label = "AutoPatch success"
          success_msg   = f"{rate}% ({success_runs}/{total_runs})"
          success_color = "brightgreen" if rate >= 95 else ("green" if rate >= 85 else ("yellow" if rate >= 70 else "orange"))

          def svg(label, message, color):
            # fixed 160px width badge to fit both strings
            return f'''<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20">
              <linearGradient id="b" x2="0" y2="100%">
                <stop offset="0" stop-color="#fff" stop-opacity=".7"/>
                <stop offset=".1" stop-opacity=".1"/>
                <stop offset=".9" stop-opacity=".3"/>
                <stop offset="1" stop-opacity=".5"/>
              </linearGradient>
              <mask id="a"><rect width="200" height="20" rx="3" fill="#fff"/></mask>
              <g mask="url(#a)">
                <rect width="120" height="20" fill="#555"/>
                <rect x="120" width="80" height="20" fill="#2cbe4e"/>
                <rect width="200" height="20" fill="url(#b)"/>
              </g>
              <g fill="#fff" text-anchor="middle"
                 font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
                <text x="60" y="14">{label}</text>
                <text x="160" y="14">{message}</text>
              </g>
            </svg>'''

          # success badge (use green-ish right side)
          success_svg = svg(success_label, success_msg, success_color)
          (BDIR / "autopatch_success.svg").write_text(success_svg, encoding="utf-8")

          # issues badge (errors + blocked)
          issues = total_errors + total_blocked
          issues_label = "AutoPatch issues"
          issues_msg   = str(issues)
          issues_svg = f'''<svg xmlns="http://www.w3.org/2000/svg" width="150" height="20">
            <linearGradient id="b" x2="0" y2="100%">
              <stop offset="0" stop-color="#fff" stop-opacity=".7"/>
              <stop offset=".1" stop-opacity=".1"/>
              <stop offset=".9" stop-opacity=".3"/>
              <stop offset="1" stop-opacity=".5"/>
            </linearGradient>
            <mask id="a"><rect width="150" height="20" rx="3" fill="#fff"/></mask>
            <g mask="url(#a)">
              <rect width="100" height="20" fill="#555"/>
              <rect x="100" width="50" height="20" fill="#cb2431"/>
              <rect width="150" height="20" fill="url(#b)"/>
            </g>
            <g fill="#fff" text-anchor="middle"
               font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
              <text x="50" y="14">AutoPatch issues</text>
              <text x="125" y="14">{issues_msg}</text>
            </g>
          </svg>'''
          (BDIR / "autopatch_issues.svg").write_text(issues_svg, encoding="utf-8")

          print(f"[badge] success={success_runs}/{total_runs}, issues={issues}")

      # Update README injector to place all three badges between markers
      - path: "scripts/update_readme_badge.py"
        mode: "100755"
        contents: |
          #!/usr/bin/env python3
          import pathlib

          README = pathlib.Path("README.md")
          badges = " ".join([
            "![TaskOps runs](.github/taskops/badges/runs.svg)",
            "![AutoPatch success](.github/taskops/badges/autopatch_success.svg)",
            "![AutoPatch issues](.github/taskops/badges/autopatch_issues.svg)",
          ])
          START = "<!-- TASKOPS BADGE START -->"
          END   = "<!-- TASKOPS BADGE END -->"

          def inject(text: str) -> str:
            block = f"{START}\n{badges}\n{END}"
            if START in text and END in text:
              pre, _, rest = text.partition(START)
              _, _, post = rest.partition(END)
              return pre + block + post
            return block + "\n\n" + text

          cur = README.read_text(encoding="utf-8") if README.exists() else "# Project\n"
          new = inject(cur)
          if new != cur:
            README.write_text(new, encoding="utf-8")
            print("[readme] badge block inserted/updated")
          else:
            print("[readme] badge already current")

      # Replace/upgrade the badge workflow to build all badges
      - path: ".github/workflows/taskops-badge.yml"
        mode: "100644"
        contents: |
          name: taskops-badge
          on:
            workflow_dispatch: {}
            schedule:
              - cron: "23 6 * * *"   # daily @ 06:23 UTC
            push:
              paths:
                - ".github/taskops/ledger.jsonl"
          permissions:
            contents: write
          jobs:
            build:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                  with:
                    persist-credentials: true
                    fetch-depth: 0
                - uses: actions/setup-python@v5
                  with:
                    python-version: "3.x"
                - name: Generate badges
                  run: |
                    set -euo pipefail
                    python scripts/taskops_badge.py
                    python scripts/taskops_badge_autopatch.py
                - name: Inject badges into README
                  run: |
                    set -euo pipefail
                    python scripts/update_readme_badge.py
                - name: Commit badge & README (if changed)
                  run: |
                    set -euo pipefail
                    git config user.name  "StegVerse Bot"
                    git config user.email "bot@stegverse.org"
                    git add .github/taskops/badges/*.svg README.md
                    if git diff --cached --quiet; then
                      echo "No changes to commit."
                    else
                      git commit -m "chore(taskops): refresh badges & README"
                      git push origin HEAD:main

  - commit:
      message: "chore(taskops): add AutoPatch success/issues badges and workflow update (autopatch)"
