name: YAML Bulk Autofix
run-name: "YAML Bulk Autofix ðŸ§©"

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/**"
      - "scripts/**"
      - ".github/trigger/yaml-bulk-autofix/**"  # enables Kick-YAML-Bulk-Autofix trigger

permissions:
  contents: write

jobs:
  fix:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Run bulk YAML autofix
        run: |
          set -euo pipefail
          python - <<'PY'
          import re, pathlib, shutil

          ROOT = pathlib.Path(".")
          WF = ROOT / ".github/workflows"
          OUTDIR = ROOT / ".github/autopatch_out"
          OUTDIR.mkdir(parents=True, exist_ok=True)

          def looks_like_step_start(line):
              return bool(re.match(r'^\s*-\s+name:\s', line))

          def looks_like_section_start(line):
              return bool(re.match(r'^[A-Za-z0-9_\-]+\s*:', line))

          def indent_of(line):
              return len(line) - len(line.lstrip(' '))

          def inject_run_block(lines, i):
              cur_indent = indent_of(lines[i])
              ins_indent = max(2, cur_indent)
              insert_at = i
              for j in range(i-1, max(-1, i-20), -1):
                  if looks_like_step_start(lines[j]):
                      insert_at = j+1
                      ins_indent = indent_of(lines[j]) + 2
                      break
                  if lines[j].strip().startswith("steps:"):
                      insert_at = j+1
                      ins_indent = indent_of(lines[j]) + 2
                      break
              lines.insert(insert_at, " " * ins_indent + "run: |\n")
              for k in range(insert_at + 1, len(lines)):
                  if looks_like_step_start(lines[k]) or re.match(r'^\S', lines[k]):
                      break
                  if lines[k].strip() and not lines[k].lstrip().startswith("#"):
                      lines[k] = " " * (ins_indent + 2) + lines[k].lstrip(" ")

          fixed_files = []
          for p in sorted(WF.glob("*.y*ml")):
              text = p.read_text(encoding="utf-8", errors="ignore")
              lines = text.splitlines(keepends=True)
              changed = False

              for idx, line in enumerate(list(lines)):
                  if re.match(r'^\s*(set -e|set -eu|set -euo)', line):
                      inject_run_block(lines, idx)
                      changed = True

              if changed:
                  p.write_text("".join(lines), encoding="utf-8")
                  fixed_files.append(str(p))

          (OUTDIR / "YAML_AUTOFIX_FIXED.txt").write_text("\n".join(fixed_files), encoding="utf-8")
          print(f"[autofix] Fixed files: {len(fixed_files)}")
          PY

      - name: Commit changes (if any)
        run: |
          set -euo pipefail
          if [ -s ".github/autopatch_out/YAML_AUTOFIX_FIXED.txt" ]; then
            git config user.name  "StegVerse Bot"
            git config user.email "bot@stegverse.org"
            git add .github/workflows .github/actions || true
            git commit -m "chore(workflows): YAML bulk autofix" || echo "Nothing to commit"
            git push origin HEAD:main || true
          else
            echo "No YAML autofixes to commit."
          fi
